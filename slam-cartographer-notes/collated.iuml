@startuml
package "CollatedTrajectoryBuilder Package" {
  class CollatedTrajectoryBuilder {
    + AddSensorData(TimedPointCloudData)
    + AddSensorData(ImuData)
    + HandleCollatedSensorData() //用于回调
    ==
    - AddData()

    - CollatorInterface* sensor_collator_
  }

  interface CollatorInterface {

    // 添加轨迹以生成按时间排序的传感器输出,并且为每个整理的传感器数据调用“回调”。
    void AddTrajectory(traj_id, expected_sens_ids, cb)
    //标记轨迹为以完成
    void FinishTrajectory(id)

    //为指定id的轨迹的添加'数据'以进行整理。
    //'data'必须包含有效的传感器数据。 
    //必须按时间顺序添加匹配'data.sensor_id_'的传感器数据包。

    void AddSensorData()

    ===
    Callback
  }

  class Collator {

    + void AddSensorData()
    ==
    //数据轨迹id和sensor_id
    - QueueKey
    -OrderedMultiQueue queue_
  }
  class TrajectoryCollator 
  class OrderedMultiQueue {

    //维护已排序的传感器数据的多个队列,traj_id, sens_id，
    //并以合并排序顺序分派它。 
    //它将等待每个未完成队列的至少有一个值
    //才开始为所有队列分派分配下一个有序值。
    ===
    + Add()
    // 找出时间最早的点
    + Dispatch()

    ==
    std::map<QueueKey, Queue> queues_;
  }
  class Queue {
    BlockingQueue<p_data> queue
    +Callback callback
    bool finished
  }
  OrderedMultiQueue <-down- Collator
  Collator <-down- CollatedTrajectoryBuilder
  Collator -down-|> CollatorInterface
  Queue <-down- OrderedMultiQueue
}
@enduml
