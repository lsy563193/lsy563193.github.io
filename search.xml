<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[cartographer论文翻译:2d-lidar-slam的实时相关扫描匹配]]></title>
    <url>%2Fslam-RealTimeCorrelativeScanMatching%2F</url>
    <content type="text"><![CDATA[实时相关扫描匹配摘要 - 扫描匹配，注册两次激光扫描的问题，以确定获得扫描的相对位置，是移动机器人最依赖的工具之一。在计算性能的权衡中，当前算法采用启发法来快速计算答案。当然，这些启发式方法并不完美：现有方法可能会产生不良结果，特别是当先验较弱时。 现代机器人可用的计算能力需要重新审视这些质量与复杂性的权衡。在本文中，我们提倡一种概率驱动的扫描匹配算法，该算法以额外的计算时间为代价产生更高质量和更稳健的结果。我们描述了这种方法的几种新颖实现，它们在现代硬件上实现了实时性能，包括传统CPU的多分辨率方法，和图形处理单元（GPU）的并行方法。我们还对我们的方法和几种现代方法进行了经验性评估，说明了我们方法的好处。这些方法的稳健性使它们对全局循环闭合特别有用。 I.引言考虑一个机器人从两个姿势x0和x1感应环境;在每个位置，它获得二维激光雷达扫描（z0和z1）。这些激光雷达扫描捕获通常以一度间隔采样的环境的水平横截面。假设环境的某些部分可以从x0和x1中进行修改，通常可以找到一个刚体变换，它将投影点z1，使它们与z0对齐。这种匹配扫描z0和z1的过程称为扫描匹配。扫描匹配问题的解决方案是刚体变换T，其由三个值参数化：两个平移分量（x和y）和旋转分量（）。从一个有趣的感知问题来看，扫描匹配是大多数导航，映射和本地化系统的核心。这是因为刚体变形与机器人从x0到x1行进时的运动完全对应。由于激光雷达衍生数据通常比测距法（其易于不可预测的轮滑）具有更高的质量，因此扫描匹配在估计机器人的运动中起着重要作用。 设计扫描匹配器的主要挑战是最小化运行时复杂性，同时最大化解决方案的质量（和稳健性）。大多数现有方法是围绕计算效率高的本地搜索设计的，这些搜索可以快速生成答案，但对初始化错误不稳健。问题在于扫描匹配在被视为优化问题时很少是凸的：成本表面可能非常复杂，具有许多局部最小值（见图1）。 车辆的航位推测误差可能导致初始估计远离全局最大值;结果，许多方法无法确定全局最大值。 本文描述了一系列基于两个激光雷达扫描的互相关的扫描匹配算法。我们的方法将问题转化为概率框架：它找到了最大化观察数据概率的刚体变换。我们不是信任局部搜索算法来找到全局最大值（一种在初始化噪声存在的情况下效果不佳的方法，正如我们将要说明的那样），而是在可能的刚体变换的整个空间上进行搜索。这个合理的区域来自先前，其可以从命令的运动或轮/视觉里程计算得出。 本文的主要贡献是： 我们描述了相关扫描匹配方法的理论和实践优势。 我们提出了一种能够在传统微处理器上实时操作的多分辨率实现方案; 我们展示了如何将基于相关性的方法映射到图形处理单元（GPU）上，从而释放CPU用于其他任务。 我们展示了如何从匹配操作中获得协方差估计。 我们对常用的三种不同算法进行了彻底的经验评估。 我们的方法的质量和稳健性，以及它们实时操作的能力，使其成为任何机械平台的理想选择，其中鲁棒性和准确性非常重要。当然，这包括同时定位和映射（SLAM）应用程序，但实际上任何导航或本地化系统都会受益。 我们首先简要回顾一下以前的工作（第二部分）。我们基于CPU和GPU的方法在第III节中描述。第四节描述了我们的实证评估方法，并将我们的方法的性能与广泛使用的几种方法进行了比较。 II 先前的工作迭代最近点（ICP）[1]，[2]和迭代最近线（ICL）[3]，[4]，[5]在扫描匹配中普遍使用。在ICP中，查询扫描中的每个点根据距离度量（最常见的是欧氏距离）与参考扫描相关联。然后可以计算最佳地对齐参考点和查询点的刚体变换。Horn的精确闭合算法[6]特别适合于任务。 Lu和Milios [7]描述了两种基于ICP的扫描匹配方法。第一种方法分别考虑旋转和平移组件：交替固定一个，然后优化另一个。给定旋转，最小二乘法用于优化翻译。使用全局截面方法[8]进行旋转搜索。他们的第二种方法，称为IDC，结合了两种类似ICP的算法和不同的点匹配启发式算法。 ICL与ICP类似，不同之处在于查询点与从参考点提取的线匹配，而不是将查询点与参考点匹配。这种方法的动机是传感器稀疏地对环境进行采样，并且不同的激光雷达扫描可以对环境的不同部分进行采样。换句话说，即使参考和查询扫描中的环境相同，也可能没有所有点的合理对应关系。最简单的 ICL变体在每对相邻的激光雷达点之间插入线，但在许多情况下这是不希望的（例如，栏杆栏杆和深度不连续）。或者，可以使用启发式方法来确定哪些点可能是连接表面的一部分，或者可以从较大的点集中提取线/样条[9]，[3]，[4]。作为他在机器人Blanche上工作的一部分，Cox描述了最早的ICL扫描匹配算法之一[10]。值得注意的是，该算法在当时可用的硬件上运行，实现了0.125 Hz的更新速率。通常期望扫描匹配方法产生协方差估计，并且Cox建议使用从最小二乘公式中掉出的不确定性估计。在简单的环境中（特别是当可用的低复杂度的先前地图时），这可以很好地工作。然而，在实践中，从最小二乘得出的不确定性估计过于自信;这是因为最小二乘步骤以数据关联为条件。不幸的是，数据关联最初是未知的，并且迭代方法可能无法计算正确的对应关系。由于从最小二乘法得出的不确定性估计值并未反映数据关联的不确定性，因此不确定性估计值往往过于自信。 文献中充满了其他扫描匹配启发式算法。这些包括使用极坐标[11]，正态分布变换，基于特征的方法[3]，[4]，霍夫变换[12]和直方图[13]，[14]。 我们的工作在精神上与Konolige基于相关的本地化方法非常相似[15]。虽然问题的表述几乎相同，但我们描述了计算答案的新方法。 图形处理单元（GPU）尚未广泛用于机器人应用。文献检索发现只有一篇关于运动规划的论文[16];令人惊讶的是，它是从1990年开始的。我们相信我们的实现是使用GPU加速映射和本地化的第一个示例。 III 方法A.概率公式我们根据图2所示的图形模型对扫描匹配问题进行建模。根据某些动作，机器人正在从$x_{i-1}$移动到$x_i$。观察值取决于环境模型m和机器人的位置。 我们的目标是找到机器人位置的后验分布，$p(x_i|x_{i-1}; u, m, z)$。我们应用贝叶斯规则并删除不相关的条件，给出： 第一项，$p（z|x_i, m）$是观察模型：如果环境和机器人的位置已知，特定观察的可能性有多大？第二项，$p(x_i|x_{i-1}, u)$是机器人的运动模型，例如从控制输入或odometry获得。 虽然运动模型通常根据多元高斯分布而已知，但是观察模型更难以计算并且结构更复杂。它通常具有多个极值，例如，如图1所示。 本文的主要贡献是一种有效计算分布$p(z|x_i, m)$的方法，以便我们可以计算机器人位置的后验分布（如方程1）。虽然以前的作者建议爬山以找到局部最大$p(z|x_i, m)$（希望获得最大似然解），但我们的方法将更全面地表征分布。我们的方法导致更强大的最大似然估计和原则不确定性估计。 像以前的工作一样，我们假设每个激光雷达返回$z_j$是独立的，允许我们写： 原则上，单个激光雷达样本$z_j$的概率分布应该考虑从特定方位的位置$x_i$可以看到地图m的哪个表面。这将需要昂贵的射线投射型操作。像其他人一样[15]，我们忽略了可见性和遮挡效应，并根据它与任何表面的距离来近似$z_j$的概率。 在同时定位和映射（SLAM）上下文[17]中，模型是从先前的激光雷达观测中得出的。在其他情况下，可以事先知道模型[10]。 B.查找 - 表格栅格化可以通过构建2D查找表来加速概率$p(z|x_i; m)$的计算。我们通过预先计算包含世界上每个$(x, y)$位置的激光雷达观测的对数概率的查找表来遵循先前方法[18]，[19]的方法。 我们的光栅化过程从map m开始。对于地图中的每个可观察点$m_i$，我们可以计算传感器观察到附近点p的条件概率，假设$m_i$是该观测的原因。我们对地图中的每个点重复此过程，记录查找表中每个点的最大概率。由于我们的查找表必须与视点无关，因此我们将由传感器模型（具有独立范围和轴承噪声）引起的潜在香蕉形分布近似为径向对称分布。对于目前可用的传感器，这似乎是一个合理的近似值。得到的查找表可以显示为图像，如图3所示。 一个关键问题是：“模型来自何处？”在极少数情况下，模型事先已知[10]，但更常见的是，模型必须根据之前的环境观察进行估算。估计这个模型本身就是一个复杂的问题，在极限情况下，需要完全解决SLAM问题。 在本文中，我们将简单地使用较早的激光扫描（参考扫描）作为我们的模型。这种方法具有易于实现，健壮（在该模型中由于早期数据关联错误而不能分散）的优点，并且可能最实际地，用作帮助复制我们的结果的基线实现。更复杂的实现可以通过组合多次扫描（例如CARMEN的Vasco）或通过从激光雷达点外推连续表面来构建更详细的模型[4]。 C.方法概述为了回顾，我们的目标是估计分布$p(z|x_i, m)$，其通过方程式。 1，可用于获得分布$p(x_i|x_{i-1},u,m,z)$。与早期方法不同，我们不仅对$p(x_i…)$的最大似然值感兴趣，而且对分布本身感兴趣，以便我们可以获得不确定性的度量。此分布没有简单的表达式：必须以数字方式进行评估。在以下两节中，我们将描述两种算法，用于在许多$x_i$值上快速评估分布$p(z|x_i, m)$。 D.多级解决方案实现本节描述了一种基于快速相关的方法，适用于传统的微处理器。常规CPU不太适合计算大量的$p(z_j x_i; m)$样本。我们的方法反映了这一点，试图尽量减少所需的评估数量 1）表征大面积的分布和 2）精确定位最大似然值。我们用三个方面描述我们的方法：从一个天真的实现到我们的多分辨率方法。 1）蛮力：原则上，我们需要在三维体积点上评估p（zj xi; m）;三个维度对应于T的未知参数：x，y和。我们的天真实现包含三个嵌套循环;对于每个体素，计算并记录概率。单个体素的评估涉及第四个嵌套循环，迭代查询扫描中的每个点，投影它，并在查找表中查找成本。我们的结果部分说明了这种方法非常慢。 2）计算2D切片：蛮力方法慢的原因之一是查询扫描中的点被重新投影到每个体素。这是不幸的，因为对于agiven值，投影查询点通过纯翻译与^ x和^ y搜索方向相关。换句话说，可以通过在最外面的循环中节省大量的计算时间，此时查询点被正确地旋转。内部两个循环（对于^ x和^ y）简单地转换查询点。通过使平移搜索的步长与查找表的分辨率匹配，可以使该操作更快。这种方法明显快于强力方法，如结果部分所示。 3）多级分辨率：我们最终的基于CPU的实现使用以不同分辨率渲染的两个光栅查找表。第一种是高分辨率（在我们的实现中为3 cm分辨率），第二种是低分辨率表（30 cm分辨率）。 在非常低的分辨率下，参考扫描中的细节可能会消失。相反，我们计算低分辨率表，以便将每个单元设置为高分辨率映射中相应单元的最大值。这确保了由低分辨率地图计算的概率始终至少与高分辨率地图中的概率一样大。换句话说，它保证我们不会错过最大值。我们的策略是使用低分辨率地图快速识别可能包含全局最大值的区域和可能不包含全局最大值的区域。目标是最小化以高分辨率搜索的音量。方法是： 1）使用低分辨率表评估整个3D搜索窗口上的概率p（zj xi; m）。2）找到尚未考虑的低分辨率3D空间中的最佳体素。将此值表示为Li。 IfLi Hbest，设置H best = Hi。这种多级分辨率方法非常快，使得实时相关扫描匹配成为可能。如结果部分所示，它也非常强大。 E.图形处理器Approach Graphics处理单元（GPU）具有非常大的计算吞吐量，非常适合在一系列值上评估像$p(zj xi; m)$这样的函数。我们相信我们是第一个在机器人映射和本地化环境中使用GPU的人。 我们的实现是作为OpenGL GLSL着色器编写的，而不是像NVidia的CUDA那样的特定于供应商的语言。虽然这需要我们的实现来投射3D渲染操作的内部问题（即，通过绘制纹理多边形来计算函数），但是相关扫描匹配方法足够简单以使其直截了当。 与基于CPU的实现类似，我们计算p（zj xi; m）的“切片”，固定每个单独切片的xi方向。我们的片段着色器将两个纹理作为输入：an1D数组由查询点组成，2D纹理对应于查找表。我们在GPU实现中使用了与CPUimplementation中完全相同的查找表。 每个片段计算特定xi值的$p(z| xi, m)$的值。该值通过纹理坐标传递给着色器。多边形中的每个片段根据在多边形顶点指定的纹理坐标自动接收线性插值纹理坐标。换句话说，当我们将多边形渲染到屏幕时，纹理坐标根本不对应于纹理：它们被片段着色器解释为应该应用于查询点的刚体变换。 片段着色器本身最接近于naive CPU方法：每个片段在查询点上迭代，根据$x_i$的本地值投射每个点，然后从查找表中获取对数似然。着色器只是将每个像素的对数似然性加在一起，然后将结果值放到帧缓冲区中。然后，主机CPU可以检查帧缓冲区以获得最大似然解决方案。在主机CPU端，我们为每个我们希望评估的xi方向绘制一个四边形。 单个四边形对应于具有固定方向的一组平移。来自GPU的结果数据如图1所示。请注意，图中的颜色编码是可视化辅助工具：GPU输出的每个像素都是标量。 F.计算协方差在许多应用中，xi的最大似然估计就足够了。但是，我们的方法允许对不确定性进行原理估计。一旦在$x_i$的值范围内评估了成本函数的值，就可以将多元高斯分布拟合到数据。设x（j）i为xi的估值： 从$p(z|x_i, m)$的计算值估计扫描匹配器的不确定性考虑了两个主要来源模糊性：传感器本身的噪声，以及哪些查询点应与模型的哪些部分相关联的不确定性。这种方法的缺点在于最终的结果。 5。样本协方差。左：位置在^ x和^ y方向上受到很好的约束，产生可信的协方差估计。右：长走廊仅提供一些纵向约束，产生一个细长的不确定性椭圆。高斯只适用于已计算的样本。任何不在采样体积内的高概率区域都不会反映在高斯分布中，从而导致估计过于自信。因此，重要的是评估概率$p(z| x_i, m)$在大范围的x — 我们的方法做得好。有关两个案例引起的协方差估计，请参见图5。 IV 结果A 实验设计对扫描匹配器进行全面的经验评估需要大量的地面数据。目前，获得这些数据的唯一合理方法是通过模拟。然而，通过模拟从真实数据生成的地图中的新数据，可以避免模拟的传统缺点（具有最小变化的不切实际的非杂乱环境）。在本文中，我们模拟了从英特尔研究中心数据集构建的地图中的激光雷达数据（参见图6）。原始数据可从Radish [20]数据存储库获得。该图使用扫描匹配器构建，该扫描匹配器采用本文中的方法结合稳健的闭环方法[4]。 为了使模拟观测更加真实（并且考虑到在数据收集过程中并未观察到建筑物的所有部分），法律观察位置是手工注释的;这些区域显示为蓝色。我们的实验从蓝色区域随机选择一个合法的姿势，然后选择附近的另一个姿势。这第二个姿势必须满足两个条件：它也必须是一个合法的姿势（即，在蓝色区域），两次扫描之间必须有一条连续的蓝线。这与我们使用360度扫描相结合，可确保两次扫描至少包含一些重叠视图。 这些预防措施确保模拟扫描包括至少一些重叠特征;如果没有重叠的特征，则不需要扫描匹配方法来计算合理的答案。该采样程序产生逼真的扫描，由于机器人的不同位置而显示出真实的杂波，噪声和遮挡效应。我们没有模拟行人等动态物体的效果。最后，模拟激光 扫描被高斯噪声破坏，与LMS-210激光雷达一致. B。 比较方法除了本文描述的基于相关性的方法之外，我们还实现了三种流行算法的变体，以提供有竞争力的比较。这些方法旨在代表使用中的算法。 1）ICP：此处使用的迭代最近点（ICP）算法使用欧氏距离作为其距离度量，匹配限制为1.0m。这里的变体是对称的：对于两次扫描中的每个点，我们找到距离另一个扫描的最近点。例如，假设ai是最接近bj的点，并且bk是最接近ai的b中的点。如果bi距离ajasbk两倍以上，则删除对应关系（ai; bi）。此细化有助于识别仅从一次扫描中可见的环境部分，并拒绝可能导致的远程对应关系。在上面的示例中，bj可能没有对应的参考点。我们的对称变体还可以创建额外的对应关系，有助于减少匹配的错误。我们使用Horn算法[6]来计算给定一组对应关系的最优刚体变换。 2）ICL：在我们的实验中使用的迭代最近线（ICL）算法使用欧几里德距离将具有最近线段的查询点相关联。线段是从相距不超过1.0米的连续点对生成的。假设查询点qi已经与线段相关联：最接近Qi的s上的点被关联并传递给Horn的算法以计算刚体变换。 3）爬坡：这里使用的爬山方法是在Vasco扫描匹配器之后建模的，它与CARMEN一起分发。这是一种局部搜索方法，它沿着轴向重复尝试步骤，接受改善匹配的步骤。步骤开始时相对较大（1米inxandy和10度）;当没有步骤产生误差减少时，步长减少一半。当步长达到预定的最小值（0.001 x forxandy和0.05 deg）时，搜索结束。与我们的方法一样，Vasco的优化以概率术语表达，并使用对数似然查找表。为了能够直接比较基于相关的方法，我们使用相同的栅格化查找表。 我们的主要实验包括大约250,000次迭代;对于每次迭代，我们选择新姿势，将噪声添加到先前估计，并运行每个扫描匹配器。 在图4中，绘制了解（z轴）中的平均平移误差与先前的平移噪声（x轴）和旋转噪声（y轴）的关系。（图的对称性是由于prioretimates具有正旋转误差和负旋转误差。） 通常，超过几厘米或几度的误差是不可接受的：它们会导致误差在机器人的位置估计中过快累积。直观地说，我们预计之前更高水平的噪声会反映在解决方案中的较大误差中。对于ICP，ICL和HillClimbing来说确实如此。值得注意的是，即使在初始化中几乎没有噪声的情况下，Hill Climbing方法的误差也略高于ICP。 本文的核心结果是：基于相关性的方法的误差对于先前的噪声而言都非常低且鲁棒。这种卓越性能的代价是更高的计算成本。但是，正如我们将在第IV-C节中看到的那样，这个成本是可控的。 查找表的分辨率会影响结果的准确性。我们将方法的误差描述为查找表分辨率在0.001英尺到1米范围内的函数。我们发现分辨率小于1.5厘米没有优势，3.1厘米分辨率只是略差。在粗糙度大于6cm的分辨率下，误差会迅速增加。根据这些数据，我们建议分辨率为3厘米。 C.性能这里描述的相关方法通常比ICL，ICP和HillClimbing慢，这一点不足为奇。相关方法的主要动机是质量的提高。然而，基于相关性的方法足够快以便实时使用（参见图7）。用于实验的CPU是Intel Core2 6600，频率为2.4 GHz。虽然CPU有多个内核，但我们的实验只使用了一个线程。我们评估了两个不同的GPU，跨越了两代性能。7600表示NVidia 7600GS以400 MHz运行，而GTX260表示NVidia GTX260（有192个流处理器），频率为650MHz。网格分辨率为1/32米，对于相关方法，步长设置为1度。 即使我们的简单实现，ICP和ICL的计算复杂性也非常好（参见图7）。爬山特别快。虽然它们的计算复杂度随着位置不确定性的增加而非常好地扩展，但是在这些高不确定性方案中它们的质量是完全不可接受的（见图4）。 正如预期的那样，相关方法的计算复杂性随着先前不确定性的增加而迅速增加：复杂性随着不确定性的量而变化。对于相对较小的不确定性，例如在增量扫描匹配上下文中将遇到的不确定性，若干相关算法能够实时性能。在这些情况下，搜索区域随着扫描仪的更新速率而降低：通过快速更新，机器人根本没有时间累积大量的位置误差。例如，在75Hz时，车辆必须具有37m / s（82mph）的速度误差，以保证0.5m的搜索窗口。搜索窗口的大小非常大：在75Hz时，机器人必须以240rpm旋转才能保证20度窗口。然而，即使在75Hz的更新速率下，多分辨率相关算法也足够快（8.4ms）以实时操作。 对于闭环应用，实时性能不那么重要：找到正确对应关系的能力成为关键因素。机器人只能在非常间歇的基础上关闭一个大循环（可能每隔几分钟一次）。这些闭环是大型不确定窗口倾向于出现的地方。我们看到相关方法的性能（特别是多分辨率实现，它可以处理4米转换误差，90度旋转误差超过10Hz）完全适合sepur姿势。 运行时的可变性对于实时系统也是一个挑战。ICP，ICL，Hill-Climbing和多分辨率相关算法的运行时复杂性与数据有关。使用ICP和ICL，计算某些扫描的答案可能需要大约2.5倍（见图8）。通常是单分辨率相关方法 更好，尽管GTX260 GPU实现的可变性高于预期。这种可变性仅发生在较小的搜索大小上：当执行更大的搜索时，GPU方法变得非常一致。我们怀疑这种可变性的一部分是由于设置操作的开销。 V.结论本文提出了一系列基于相关性的扫描匹配算法。这种方法对初始化噪声极为严重，目前正在使用的方法非常出色。我们证明了可以在CPU和GPU上实时使用这些强大的算法。我们的方法是概率驱动的，使得合并概率先验和计算协方差估计变得容易。我们的例程的实现可以在http://april.eecs.umich.edu上找到。 参考文献[1] P. Besl和N. McKay，“三维形状配准方法”，IEEETTraactions on Pattern Analysis and Machine Intelligence，vol。 14，没有。 2，pp.239-256,1992。 [2] S. Thrun，M。Diel和D. ahnel，“用直升机平台扫描对准和三维表面建模”，2003年。[在线]。可用：citeseer.ist.psu.edu/thrun03scan.html [3] M. C. Bosse，“ATLAS：大规模自动化绘图和定位的框架”，博士。学位论文，麻省理工学院，剑桥，马萨诸塞州，美国，2004年2月。 [4] E. Olson，“鲁棒而高效的机器人绘图”，博士。论文，麻省理工学院，剑桥，马萨诸塞州，美国，2008年6月。 [5] A. Censi, “An icp variant using a point-to-line metric,” inProceedings of the IEEE International Conference on Robotics and Automation (ICRA),2008. [6] B. K. P. Horn, “Closed-form solution of absolute orientation using unit quaternions,”Journal of the Optical Society of America. A, vol. 4, no. 4,pp. 629–642, Apr 1987. [7] F. Lu and E. Milios, “Robot pose estimation in unknown environments by matching 2d range scans,” inProceedings of the IEEE Computer Society Conference on Computer Vision andPattern Recognition (CVPR), 1994, pp. 935–938. [Online]. Available:citeseer.ist.psu.edu/lu94robot.html [8] W. Press, S. Teukolsky, W. Vetterling, and B. Flannery,NumericalRecipes in C, 2nd ed. Cambridge, UK: Cambridge University Press,1992. [9] M. A. Fischer and R. C. Bolles, “A paradigm for model-fitting with applications to image analysis and automated cartography,” 1981. [10] I. J. Cox, “Blanche- An experiment in guidance and navigation of an au-tonomous robot vehicle,”Robotics and Automation, IEEE Transactionson, vol. 7, no. 2, pp. 193–204, 1991. [11] A. Diosi and L. Kleeman, “Fast laser scan matching using polarco ordinates,”International Journal of Robotics Research, vol. 26, no. 10,pp. 1125–1153, 2007. [12] A. Censi, L. Iocchi, and G. Grisetti, “Scan matching in the houghdomain,” inProceedings of the IEEE International Conference onRobotics and Automation (ICRA), 2005. [13] T. Rfer, “Using histogram correlation to create consistent laser scanmaps,” inProceedings of the IEEE International Conference on Roboticsand Automation (ICRA), 2002, pp. 625–630. [14] M. Bosse and J. Roberts, “Histogram matching and global initializationfor laser-only slam in large unstructured environments,” inICRA, 2007,pp. 4820–4826. [15] K. Konolige and K. Chou, “Markov localization using correlation,” inIJCAI ’99: Proceedings of the Sixteenth International Joint Conferenceon Artificial Intelligence. San Francisco, CA, USA: Morgan KaufmannPublishers Inc., 1999, pp. 1154–1159. [16] J. Lengyel, M. Reichert, B. R. Donald, and D. P. Greenberg, “Real-timerobot motion planning using rasterizing computer graphics hardware,”inIn Proc. SIGGRAPH, 1990, pp. 327–335. [17] S. Thrun, “Robotic mapping: A survey,” inExploring Artificial Intelli-gence in the New Millenium, G. Lakemeyer and B. Nebel, Eds. MorganKaufmann, 2002, to appear. [18] S. Thrun, W. Burgard, and D. Fox, “A real-time algorithm for mobilerobot mapping with applications to multi-robot and 3D mapping,” inProceedings of the IEEE International Conference on Robotics andAutomation (ICRA). San Francisco, CA: IEEE, 2000. [19] M. Montemerlo, N. Roy, and S. Thrun, “Perspectives on standardiza-tion in mobile robot programming: The Carnegie Mellon navigation(CARMEN) toolkit,” inProceedings of the IEEE/RSJ InternationalConference on Intelligent Robots and Systems (IROS), vol. 3, Las Vegas,NV, October 2003, pp. 2436–2441. [20] A. Howard and N. Roy, “The robotics data set repository (radish),”2003. [Online]. Available: http://radish.sourceforge.net/]]></content>
      <categories>
        <category>slam技术</category>
      </categories>
      <tags>
        <tag>cartographer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cartographer论文翻译 二维构图的高效稀疏位姿调整]]></title>
    <url>%2Fslam-EfficientSPAFor2DMapping%2F</url>
    <content type="text"><![CDATA[摘要位姿图已成为解决同时定位和构图（SLAM）问题的流行表示。位姿图是一组机器人位姿，通过观察附近位姿共有的特征获得的非线性约束连接。优化大型位姿图一直是移动机器人的瓶颈，因为直接非线性优化的计算时间可以随着图的大小而指数增长。在本文中，我们提出了一种构造和求解线性子问题的有效方法，这是这些直接方法的瓶颈。我们将我们称为稀疏位姿调整（SPA）的方法与竞争间接方法进行比较，并表明它在收敛速度和准确性方面优于它们。我们在大量室内真实世界地图和非常大的模拟数据集上展示了它的有效性。C++中的开源实现和数据集是公开可用的。 1. 介绍机器人构图的最新文献显示出对基于图的SLAM方法的兴趣日益增加。在最一般的形式中，图形具有表示机器人位姿和世界特征的节点，测量将它们连接为约束。所有方法的目标是共同优化节点的位姿，以便最小化约束引入的误差。该问题的一个经典变体来自计算机视觉，并表示为束调整[25]，其通常用Levenberg-Marquardt（LM）非线性优化器的专用变体解决。在SLAM文献中，Lu-Milios [18]，GraphSLAM [24]和√SAM[4]都是这种技术的变种。 由于特征往往超过机器人位姿，通过将特征观察转换为机器人位姿之间的直接约束，可以创建更紧凑的系统，要么通过边缘化[1,24,4]，要么通过直接匹配 - 例如，在两个机器人位姿之间匹配激光扫描产生两者的相对位姿估计。在典型的机器人地图应用中，位姿约束系统表现出稀疏的连接结构， (所以SPA是通过位姿构造)因为传感器的范围通常限于机器人的附近。 有效地解决位姿图（即，找到节点的最佳位置）是这些方法的关键问题，尤其是在在线构图问题的背景下。100m x 100m 办公空间的典型2D激光地图可能有数千个节点和更多约束（见图1）。此外，向此构图添加循环闭包约束可能会影响系统中的几乎所有位姿。o LM方法的核心在于解决大的稀疏线性问题。 在本文中，我们开发了一种从约束图有效地计算稀疏矩阵的方法，并使用直接稀疏线性方法来解决它。与视觉文献中的稀疏束调整类似，我们将此方法称为稀疏位姿调整（SPA），因为它处理位姿-位姿约束的受限情况。SBA/GraphSLAM优化器与解决线性子问题的有效方法的组合具有以下优点。 它考虑约束中的协方差信息，从而得到更精确的解。 SPA是健壮的并且容忍初始化，对于增量处理和批处理来说，具有非常低的故障率（陷入局部最小值）。 收敛非常快，因为它只需要LM方法的几次迭代。 与EKF和信息滤波器不同，SPA是完全非线性的：在每次迭代中，它线性化当前位姿周围的所有约束。 SPA在批处理和增量模式下都是有效的 我们在实验结果部分记录了该方法的这些和其他特征，其中我们还将此方法与其他LM和非LM的最新优化器进行比较。 SPA效率的好处之一是，构图系统可以连续优化其图，提供所有节点的最佳全局估计，而计算开销非常小。解决图1所示的大型地图的优化问题只需要距离里程计提供的初始配置150ms。 在增量模式下，在添加每个节点之后优化图，对于任何节点添加，它需要小于15ms。 尽管SPA可以用3D位姿参数化，但是本文将其局限于二维构图，这是一个具有多种竞争优化技术的成熟领域。我们的意图是表明一个基于二维位姿的构图系统可以在线使用SPA作为其优化引擎，甚至在大规模环境和具有大环路闭合，而不诉诸子构图或复杂的划分方案。 II. 相关工作18 1997 — 提出graph slam,无优化，慢 13 2001 — 松弛法定位机器人06 2002 — 高斯-塞德尔松弛法最小化约束网络中的误差。09 2005 — 多层松弛法 21 2006 — 优化位姿图 提出随机梯度下降法10 2009 — 基于树的参数化 提高梯度下降法收敛速度 02 1995 — 最直观的方法:非线性最小二乘优化(ML pass) 一种有前途的技术是预条件共轭梯度PCG15 2004 — 大规模制图 使用了PCG作为解析器20 2004 — 大规模3d制图 使用了PCG作为解析器05 1994 — 稀疏矩阵库03 2006 — 直接线性求解器04 2005 — 使用稀疏的直接线性求解器[3]实现束调整14 2007 — $\sqrt{SAM}$的变体，称为iSAM 07 2006 — 用信息矩阵形式递增地求解图的滤波技术:延迟稀疏信息滤波器（DSIF）08 2006 — 通过树表示来捕获系统的稀疏结构 00 2010 — 直接稀疏Cholesky分解求解线性系统的二维位姿图优化方法 Lu和Milios[18]提出了基于图的SLAM的具有开创性的工作，其中他们通过ICP扫描匹配来确定扫描之间的成对测量，然后通过迭代线性化来优化该图。那时，SLAM社区还没有有效的优化算法，基于图的方法被认为太耗时。尽管如此，基于图的SLAM的直观公式吸引了许多研究者，并做出了有价值的贡献。 自从Lu和Milios论文发表以来，人们提出了许多图优化的方法。霍华德等人[13]应用松弛法定位机器人并建立地图。杜克特等人[6]提出了利用高斯-塞德尔松弛来最小化约束网络中的误差。为了克服松弛法固有的收敛速度慢，Frase等人[9]提出了Gauss-Seidel松弛的一种变型，称为多层松弛法(MLR)。它适用于不同分辨率的松弛。据报道，MLR在2D环境中提供非常好的结果，尤其是在初始猜测的误差有限的情况下。 奥尔森[21]等人提出了随机梯度下降法来优化位姿图。这种方法的优点是易于实现，并且对错误的初始猜测异常健壮。后来，格里塞蒂等[10]通过应用显著提高收敛速度的基于树的参数化来扩展这种方法。这些方法的主要问题是，它们假设图中的误差或多或少是均匀的，因此它们很难应用于某些约束未被指定的图。 优化图的最直观的方法可能是通过非线性最小二乘优化，如LM。最小二乘法需要重复求解通过线性化图的原始似然函数而获得的大型线性系统。这种线性系统通常非常大；因此，第一种基于图的方法是耗时的，因为它们没有利用其自然的稀疏性。一种有前途的技术是预条件共轭梯度（PCG）[2]，后来被Konolige[15]和Montemerlo和Srun[20]用作大型稀疏位姿约束系统的有效求解器； 预条件通常是不完全Cholesky分解。PCG是一种迭代方法，一般需要n次迭代才能收敛，其中n是图中变量的数目。我们从Sparselib++和IML++[5]中实现了PCG的稀疏矩阵版本，并将该实现用于比较实验。 最近，Dellaert和他的同事使用束调整，他们使用稀疏的直接线性求解器[3]实现束调整；他们称他们的系统$\sqrt{SAM}$[4]。我们的方法与SAM类似；主要在工程上不同，我们是通过使用有序数据结构高效地构造线性子问题。我们还使用LM代替标准的非线性最小二乘法，从而提高了鲁棒性。最后，我们介绍了增量情况下的一种“连续LM”方法，以及一种更稳健的批处理问题的初始化方法。 凯斯等人。[14]引入了$\sqrt{SAM}$的变体，称为iSAM，其执行与非线性最小二乘问题相关联的线性矩阵的增量更新。只偶尔执行重线性化和变量排序，从而提高计算效率。在我们的方法中，重新线性化和矩阵构造是非常有效的，因此这些方法变得不太必要。目前，我们没有iSAM或_SAM的实现，无法针对性能进行测试。 松弛法或最小二乘法通过迭代地细化初始猜测来进行。相反，基于随机梯度下降的方法对初始猜测更稳健。在SLAM文献中，这种初始猜测的重要性经常被低估。初始猜测越好，算法找到正确解决方案的可能性就越大。在本文中，我们讨论了这一点，并评估了三种不同的策略来计算初始猜测。 与全非线性优化相比，一些研究人员探索了使用信息矩阵形式递增地求解图的滤波技术。第一种这样的方法是由EuStruts等人提出的。并称之为延迟稀疏信息滤波器（DSIF）〔7〕。这种技术可能是非常有效的，因为它仅向系统信息矩阵添加少量的常数元素，甚至对于循环闭合也是如此。然而，恢复所有节点的全局位姿需要求解一个大型的稀疏线性系统；有更快的方法来获得近似的最近位姿。 Frese提出了TreeMap [8]算法，该算法通过树表示来捕获系统的稀疏结构。树中的每个叶子都是一个局部地图，估计的一致性是通过树发送更新到局部地图来实现的。在理想条件下，此方法可以在O（n log n）时间内更新整个地图，其中n是地图中元素的数量。但是，如果地图具有许多局部连接，则局部地图的大小可能非常大，并且它们的更新（被视为基本操作）变得计算成本昂贵，如本文其余部分所示。 综上所述，本文提出了一种利用直接稀疏Cholesky分解求解线性系统的二维位姿图优化方法。线性系统的计算采用内存高效的方式，使缓存遗漏最小化，从而显著提高了性能。我们将我们的方法在精度和速度上与可用的现有LM和非LM方法进行比较，并且表明SPA优于它们。开源实现在C++和Matlab/OcthVE中都是可用的。用于求解稀疏系统的有效直接（非迭代）算法已经变得可用[3]，从而恢复了一系列用于优化过去被丢弃的图的方法。 在本文中， III. SYSTEM FORMULATION解决SLAM问题的流行方法是所谓的“基于图”或“基于网络”方法。这个想法是通过图来表示机器人测量的历史。图中的每个节点表示传感器测量或局部地图，并且用测量所处的位置对其进行标记。两个节点之间的边缘编码由于连接测量的对齐而产生的空间信息，并且可以被视为两个节点之间的空间约束。 在基于图的SLAM环境中，通常考虑两个不同的问题。第一种是基于传感器数据识别约束。由于环境中的潜在模糊或对称性，这种所谓的数据关联问题通常很难解决。这个问题的解决方案通常被称为SLAM前端，它直接处理传感器数据。第二个问题是修正机器人的位姿，以获得给定约束环境的一致构图。这种方法的这一部分通常被称为优化器或SLAM后端。它的任务是寻找使约束中编码的测量的可能性最大化的节点的配置。对这个问题的另一种观点是由物理学中的弹性模型给出的。在这种观点中，节点被视为质量，而约束则被视为与质量相连的弹簧。弹簧和质量的最小能量配置描述了构图问题的解决方案。 在其操作期间，基于图的SLAM系统交错前端和后端的执行，如图2所示。 这是必需的，因为前端需要对部分优化的构图进行操作，以限制对潜在约束的搜索。当前估计越精确，由前端生成的约束将越健壮，并且其操作也越快。因此，从估计精度和执行时间方面衡量的优化算法的性能对整个构图系统有重要影响。 本文详细描述了一种高效紧凑的二维图优化方法。我们的算法可以与处理不同类型传感器的任意前端耦合。为了简洁的介绍，我们简短地描述了激光数据的前端。然而，一般概念可以直接应用于不同的传感器。 IV. SPARSE POSE ADJUSTMENT为了优化一组位姿和约束，我们使用众所周知的Levenberg-Marquardt(LM)方法作为框架，并且使用特定的实现使其对于二维地图构建中遇到的稀疏系统有效。类似于计算机视觉的稀疏束调整（SPA），它是用于相机和特征的LM的类似高效实现，我们称之为稀疏位姿调整（SPA）。 A. Error Formulation系统的变量是机器人的全局位姿集，通过平移和角度参数化:$c_i=[t_i , θ_i ] = [x_i , y_i , θ_i]^⊤$约束是来自另一个（$c_i$）位置的一个节点$c_j$的测量。在$c_i$的帧中，$c_i$和$c_j$之间的测量偏移是$\overline{z}_{ij}$，具有精度矩阵Λij（协方差的倒数）。对于$c_i$和$c_j$的任何实际位姿，它们的偏移可以计算为 这里$R_i$是$θ_i$的2x2旋转矩阵。 $h(c_i , c_j )$称为测量方程。与约束相关的误差函数和总误差是 注意，$h(c_i，c_j)$中的角度参数不是唯一的，因为加上或减去2π会产生相同的结果。当角度差发生时，它们总是标准化为间隔（-π，π）。 B. Linear System通过最小化等式2中的总误差来找到$c$的最佳位置。解决该问题的标准方法是Levenberg-Marquardt（LM），围绕c的当前值迭代线性化解。通过将变量c堆叠到向量x中来形成线性系统，并且误差函数被形成为向量e。然后我们定义： LM系统是: 这里λ是一个小的正乘数，它在梯度下降和牛顿-欧拉方法之间转换。梯度下降更稳健，不太可能陷入局部最小值，但收敛缓慢;牛顿-欧拉的行为相反。通过为每个测量$h（c_i，c_j）$添加四个分量来形成矩阵H. 这里我们略微滥用了J的符号，其中$J_i$是关于变量$c_i$的$e_{ij}$的雅可比行列式。这些组件都是3x3块。通过为每个约束添加3x1块$J_{c_i}Λ_{ij}e_{ij}$和$J_{c_j}Λ_{ij}e_{ij}$形成右侧。求解线性方程得到增量Δx即可被添加回x的当前值，如下所示： C. Error Jacobians测量函数的雅可比行列式在正则方程式（4）中出现，我们在这里列出它们。 D. Sparsity 稀疏性我们感兴趣的是大型系统，其中||c||的数量可以是10k或更多（我们能够找到的最大真实世界室内数据集是大约3k位姿，但我们可以生成任何顺序的合成数据集）。系统变量的数量是3||c||，而H矩阵是||c ||^2，或者超过$10^8$个元素。。操纵这样大的矩阵是昂贵的。幸运的是，对于典型的场景，约束的数量仅与位姿的数量成线性关系，因此它非常稀疏。我们可以利用稀疏性来更有效地解决线性问题。 为了以稀疏格式求解（4），我们使用CSparsepackage [3]。该软件包具有针对稀疏线性系统的高度优化的Choleskydecomposition求解器。它采用了几种高效分解策略，包括逻辑排序和近似最小度（AMD）算法，以便在变量很大时对变量进行重新排序。 通常，分解的复杂性将是变量数量的O（n3）。对于稀疏矩阵，复杂性将取决于Cholesky因子的密度，而Cholesky因子的密度又取决于H的结构及其变量的顺序。Mahon等[19]分析了Clesles分解的行为作为SLAM系统中闭环的函数。如果循环闭合的数量是恒定的，那么Cholesky因子密度是O（n），并且分解是O（n）。如果循环闭包的数量随着变量的数量线性增长，则Cholesky因子密度增长为O（n2），分解为O（n3）。 E. Compressed Column Storage 压缩列存储LM算法的每次迭代都有三个步骤：建立线性系统、分解H和通过回代寻找$\Delta x$。建立系统的约束数量是线性的（因此基于多数图的SLAM系统的变量数量也是线性的）。在许多情况下，它可能成为线性求解器中成本较高的部分。这里我们概括了根据方程（5）产生的约束条件建立H的稀疏矩阵形式的一种有效方法。下图显示了基本思想。 CSparse使用压缩列存储（CCS）格式的forsparse矩阵。下图显示了基本概念。 数组中的每个非零条目都放在val向量中。条目首先按列排序，然后按行排序。col_ptr每列有一个条目，加上最后一个条目，即非零总数（nnz）。列的col_ptr条目指向row_ind和val变量中列的开头。最后，row_ind给出了列中每个条目的行索引。 CCS格式具有存储效率，但难以逐步创建，因为对列的每个新的非零添加都会导致所有后续条目的移位。最有效的方法是按列顺序创建稀疏矩阵，这需要循环通过约束|| c ||次。相反，我们只修改一次约束，并将每个3x3块$J_i^TΛ_{ij}J_{i}$存储在一个与CCS格式平行的特殊的面向块的数据结构中。该算法在表I中给出。在该算法中，我们通过约束来将3×3块矩阵存储到C ++ std :: mapdata结构中，每列一个。构图在基于其键（行索引）的有序插入时是有效的。一旦创建了这个数据结构（步骤（2）），我们使用构图的有序特性来创建Hby的稀疏CCS格式，按照其键的顺序循环遍历每个构图，首先创建列和行索引，以及然后放入值。将列/行创建与值插入分开的原因是因为对于LM的任何迭代集合，前者只需要执行一次。 注意，只存储H的上三角形元素，因为CSparse中的Cholesky解算器仅查看该部分，并假设矩阵是对称的。 F.可持续的LM系统 LM系统算法详见表II。对于具有相关测量的一组节点c，它在LM算法中执行一步。运行单次迭代允许LM的增量操作，以便在迭代之间可以添加更多节点。该算法是可持续的，因为λ在迭代之间被保存，因此连续迭代可以基于它们的结果改变λ。这个想法是添加一些节点和测量不会对系统产生太大的影响，因此λ的值具有关于梯度下降状态与欧拉 - 牛顿方法的信息。当发生循环闭合时，系统可能无法找到一个好的最小值，并且λ将在接下来的几次迭代中上升以使系统沿着良好的路径前进。 有许多不同的调整λ的方法;我们选择一个简单的方法。系统以一个小的lambda开始， $10^4$ 。如果更新的系统具有比原始系统更低的误差，则λ减半。如果误差相同或更大，则λ加倍。这在增量优化的情况下非常有效。只要在添加节点时误差减小，λ就会减小，系统会停留在Newton-Euler区域。当添加链接导致无法校正的大失真时，λ可以上升并且系统返回到更稳健的梯度下降。 V. SCAN MATCHING 扫描匹配SPA需要通过激光扫描（或其他传感器）的匹配进行精确（逆协方差）估计。有几种扫描匹配算法可以提供这种算法，例如，Gutmannet等[11]使用点匹配参考扫描中提取的线，并返回高斯误差估计。最近，由Olson [22]扩展的Konolige和Chou [17]的相关方法提供了一种在给定范围内找到全局最佳匹配的有效方法，同时返回准确的协方差。该方法允许单个扫描或一组对齐扫描与另一个单个扫描或一组对齐扫描匹配。此方法在SRI的构图系统$Karto^1$中用于顺序扫描的局部匹配，以及[12]中的扫描集的循环闭包匹配。为了生成实验的真实数据集，我们在63个不同大小的存储机器人日志上运行Karto，使用其扫描匹配和优化器来构建构图并生成约束，包括循环闭包。保存图表并将其用作实验中所有方法的输入。 VI. EXPERIMENT 实验在本节中，我们将展示实验，其中我们将SPA与63个真实世界数据集和大型模拟数据集上的最新方法进行比较。我们考虑了各种各样的方法，包括最先进的技术。 信息过滤器：DSIF[7] 随机梯度下降：环面[ 10 ] 分解非线性系统：Treemap[8] 稀疏姿态调整：SPA，带有(a)稀疏直接Cholesky求解器和(b)迭代PCG[15] 我们更新了PCG实现，以使用与SPA相同的“连续LM”方法；惟一的区别在于底层的线性求解器。先决条件是不完全Cholesky方法，共轭梯度以稀疏矩阵形式实现。我们还评估了一个稠密的Cholesky求解器，但是计算和内存需求都比其他方法大几个数量级。例如，对于具有1600个约束和800个节点的数据集，使用密集Cholesky求解器进行迭代需要2.1秒，而其他方法平均需要几毫秒。所有实验都在2.67Ghz运行的Intel Core i7-920上进行。 在下文中，我们报告了在不同操作条件下方法的行为的累积分析；所有数据集的结果可在线查阅www.ros.org/./2010/spa。我们在批处理和在线两种模式下测试了各种方法。在批处理模式下，我们为算法提供全图，而在线模式下，每当向图中添加一个新节点时，我们都进行一定数量的迭代。在本节的其余部分中，我们首先讨论离线实验，然后介绍在线实验。通过对大规模仿真数据集上各种方法的分析，得出结论。 A.精度测量对于这些室内数据集，没有基本事实。相反，姿态约束系统的优良性度量是约束的协方差加权平方误差，或称^2误差。如果扫描匹配器是准确的，那么较低的^2表示扫描对齐得更好。图3显示了在真实世界数据集上的这种效果。 B.真实世界实验：离线优化。为了离线优化数据集，我们为每个优化器提供问题的完整描述。我们在比较DSIF和TreeMap时省略了它们，因为它们只增量地操作（DSIF相当于批处理模式下SPA的一次迭代）。由于离线优化的成功很大程度上取决于初始猜测，因此我们还研究了两种初始化策略，如下所述。 里程计: 图中的节点用增量约束进行初始化。这是几乎所有的图优化算法所采用的标准方法。 生成树: 使用广度优先访问在图上构造生成树。树的根是图的第一个节点。节点的位置根据生成树的深度优先访问进行初始化。将子节点的位置设置为根据连接约束转换后的父节点的位置。在我们的实验中，这种方法给出了最好的结果。 对于每个数据集和每个优化器，我们计算上面描述的初始猜测。每个优化器都运行最少的迭代次数，或者直到满足终止条件为止。我们测量了收敛所需的时间和每种方法的2误差。图4总结了Odo.和Spanning-Tree初始化的结果。对于这些数据集，这两种类型的初始化在性能上没有实质性差异。 在误差图中，PCG和SPA收敛到几乎完全相同的解，因为唯一的区别是线性差异。求解器。它们都主导TORO，对于较大的图，TORO的误差是TORO的10倍以上。我们把此归因于TORO无法处理非球面协方差，以及它的非常慢的收敛特性。对于几乎所有的图，SPA所需的计算量几乎比PCG或TORO少一个数量级。 TORO被设计成对糟糕的初始化具有鲁棒性，并且为了测试这一点，我们还运行所有方法，所有节点都初始化为(0，0，0)。在这种情况下，SPA和PCG收敛到所有数据集的非全局最小值，而TORO能够重建正确的拓扑。 C.真实世界实验：在线优化对于在线比较，我们通过添加一个节点以及通过将新添加的节点连接到先前存在的图来递增地扩充图。我们在插入每个节点之后调用优化器，并且以这种方式在与SLAM前端一起执行时模拟它的行为。对于最大次数的迭代，或者直到误差不减小为止，进行优化。SPA/PCG的最大迭代次数是1；TreeMap为3；TORO为100。由于PCG迭代求解线性子问题，因此我们把其限制在50次迭代。选择这些阈值是为了在减少错误方面获得最佳性能。 在收敛性方面，SPA/PCG方法占主导地位。这对于DSIF的情况并不奇怪，DSIF是一种信息过滤器，因此在关闭大循环时会出现线性化误差。TORO具有与SPA最接近的性能，但每次迭代的收敛速度非常慢，这是梯度方法的特点；在收敛性方面，SPA/PCG方法占主导地位。这对于DSIF的情况并不奇怪，DSIF是一种信息过滤器，因此在关闭大循环时会出现线性化误差。TORO算法与SPA算法性能最接近，但每次迭代的收敛速度很慢，具有梯度法的特点；在收敛性方面，SPA/PCG算法是其他算法的主要特点。这对于DSIF的情况并不奇怪，DSIF是一种信息过滤器，因此在关闭大循环时会出现线性化误差。TORO具有与SPA最接近的性能，但每次迭代的收敛速度非常慢，这是梯度方法的特点；它也不处理非循环协方差，这限制了它实现最小2的能力。由于树图具有建立树结构进行优化的复杂策略，因此很难进行分析。对于这些数据集，它似乎有一个带有小叶子的大树（大型数据集循环）。通过固定线性化和删除连接，优化了树结构，使计算速度快，但收敛性差，2比SPA差近3个数量级。 所有的方法在约束图的大小上都是近似线性的，这意味着大循环闭包的数量增长缓慢。在所有数据集中，Treemap的性能最好，其次是SPA和DSIF。注意，SPA的行为是极其规则的：在任何数据集上与线性级数几乎没有偏差。此外，平均时间和最大时间是相同的：参见图8中的图表。最后，TORO和PCG每次迭代使用更多的时间，PCG大约是SPA的四倍。由于SPA的快速收敛性，我们只需每增加n个节点，就可以实现更低的计算量。我们强调这些图表是我们所能找到的最大的室内数据集，它们对SPA来说并不具有挑战性。 D.合成数据集为了估计算法的渐近行为，我们生成一个大的模拟数据集。机器人在网格上移动，网格的每个单元格都有5米的一边，我们每米创建一个节点。这个机器人的感知范围是1.5米。机器人的运动和测量都受到标准偏差为u=diag(0.01m,0.01m,0.5deg)的零均值高斯噪声的影响。每当机器人接近它访问过的位置时，我们就生成一个新的约束。模拟区域跨度超过500×500米，轨道总长100公里，重复观测频繁。全图如图6所示。这是一个极具挑战性的数据集，比任何真实世界的数据集都要糟糕。下面，我们报告所有我们比较的算法的批处理和在线执行的结果。 a)离线优化：每个批处理方法都使用前面部分描述的三个初始化来执行：里程计、生成树和零。结果如图7所示，是时间的函数。唯一能从零或里程表初始化优化图的方法是TORO；SPA/PCG在里程表或零开始时基本上不会收敛到全局最小值。SPA/PCG在生成树初始化后10秒左右全局收敛，在收敛点SPA明显更快（参见图7中的放大图）。TORO具有良好的初始收敛性，但由于梯度下降而具有长尾。 b)在线优化：我们增量地处理数据集，如第六-C节所述。在图8中，我们报告了每增加一个节点2误差和时间的演变。SPA和TreeMap都收敛到最小2（对于收敛图，参见图7）。然而，它们的计算行为非常不同：TreeMap每次迭代最多可以使用100秒，而SPA随着图的大小而缓慢增长。由于TreeMap在数据集中进行重访，因此树形图具有叶子非常大的小树，并且在每个叶子处执行LM优化，导致低误差和高计算量。其他方法具有与SPA等效的计算量，但不收敛。同样地，DSIF性能很差，并且不会收敛。TORO收敛，但是像往常一样难以清除小的误差。PCG的尖峰是由于它没有完全解决线性子问题，最终导致较高的整体误差。 VII. 结论本文提出并实验验证了一个二维姿态图的稀疏姿态调整非线性优化系统。SPA依赖于有效的线性矩阵构造和稀疏的非迭代Cholesky分解来有效地表示和解决大型稀疏姿态图。我们所能找到的真实数据集中没有一个是具有挑战性的——即使在批处理模式下也是如此。最大构图需要次秒的时间才能完全优化。联机计算最坏在10ms/节点范围内；与EKF滤波器或其他计算性能差的方法不同，我们不需要将构图分割成子构图[23]来获得全局最小误差。 与现有方法相比，SPA更快，收敛更好。唯一的例外是在初始化较差的构图中，只有TORO的随机梯度技术才能收敛；但是通过应用生成树初始化，SPA甚至能比TORO更好地解决复杂的合成实例。当与扫描匹配前端结合时，SPA将支持在线勘探和地图构建。因为SPA是一种姿态图方法，所以它允许对地图进行增量添加和删除，便于终身构图[16]。 用于运行SPA的所有相关代码和我们实现的其他方法都可以作为开放源码以及数据集和仿真生成器（www.ros）在线获得。org/./2010/spa)随附的视频显示在一个大型的真实世界数据集上的在线和离线模式下的SPA。 REFERENCES[1] M. Agrawal and K. Konolige. FrameSLAM: From bundle adjustmentto real-time visual mapping.IEEE Transactions on Robotics, 24(5) October 2008. [2] F. F. Campos and J. S. Rollett. Analysis of preconditioners for conjugategradients through distribution of eigenvalues.Int. J. of ComputerMathematics, 58(3):135–158, 1995. [3] T. A. Davis.Direct Methods for Sparse Linear Systems (Fundamentalsof Algorithms 2).Society for Industrial and Applied Mathematics,Philadelphia, PA, USA, 2006. [4] F. Dellaert. Square Root SAM. InProc. of Robotics: Science and Systems (RSS), pages 177–184, Cambridge, MA, USA, 2005. [5] J. Dongarra, A. Lumsdaine, R. Pozo, and K. Remington. A sparse matrixlibrary in c++ for high performance architecture s. InObject OrientedNumerics Conference, pages 214–218, 1994. [6] T. Duckett, S. Marsland, and J. Shapiro. Fast, on-line learning of globally consistent maps.Journal of Autonomous Robots, 12(3):287 – 300, 2002. [7] R. M. Eustice, H. Singh, and J. J. Leonard. Exactly sparsedelayed-statefilters for view-based SLAM.IEEE Trans. Robotics, 22(6), 2006. [8] U. Frese. Treemap: Ano(logn)algorithm for indoor simultaneouslocalization and mapping.Journal of Autonomous Robots, 21(2):103–122, 2006. [9] U. Frese, P. Larsson, and T. Duckett. A multilevel relaxation algorithmfor simultaneous localisation and mapping.IEEE Transactions onRobotics, 21(2):1–12, 2005. [10] G. Grisetti, C. Stachniss, and W. Burgard. Non-linear constraint networkoptimization for efficient map learning.IEEE Transactions on IntelligentTransportation Systems, 10:428–439, 2009. ISSN: 1524-9050. [11] J.-S. Gutmann, M. Fukuchi, and K. Sabe. Environment identification bycomparing maps of landmarks. InInternational Conference on Roboticsand Automation, 2003. [12] J.-S. Gutmann and K. Konolige. Incremental mapping of large cyclicenvironments. InProc. of the IEEE Int. Symposium on ComputationalIntelligence in Robotics and Automation (CIRA), pages 318–325, Mon-terey, CA, USA, 1999. [13] A. Howard, M. Matari ́c, and G. Sukhatme. Relaxation on a mesh:a formalism for generalized localization. InProc. of the IEEE/RSJInt. Conf. on Intelligent Robots and Systems (IROS), pages 1055–1060,2001. [14] M. Kaess, A. Ranganathan, and F. Dellaert. iSAM: Fast incrementalsmoothing and mapping with efficient data association. InInternationalConference on Robotics and Automation, Rome, 2007. [15] K. Konolige. Large-scale map-making. InProceedings of the NationalConference on AI (AAAI), 2004. [16] K. Konolige and J. Bowman.Towards lifelong visual maps.InInternational Conference on Intelligent Robots and Systems, pages1156–1163, 2009. [17] K. Konolige and K. Chou. Markov localization using correlation. InProc. of the Int. Conf. on Artificial Intelligence (IJCAI), 1999. [18] F. Lu and E. Milios. Globally consistent range scan alignment for environment mapping. Journal of Autonomous Robots, 4:333–349, 1997. [19] I. Mahon, S. Williams, O. Pizarro, and M. Johnson-Roberson. Efficientview-based SLAM using visual loop closures.IEEE Transactions onRobotics, 24(5):1002–1014, October 2008. [20] M. Montemerlo and S. Thrun. Large-scale robotic 3-d mapping of urbanstructures. InISER, 2004. [21] E. Olson, J. Leonard, and S. Teller. Fast iterative optimization of posegraphs with poor initial estimates. InProc. of the IEEE Int. Conf. onRobotics &amp; Automation (ICRA), pages 2262–2269, 2006. [22] E. B. Olson. Real-time correlative scan matching. In International Conference on Robotics and Automation, pages 4387–4393, 2009. [23] L. Paz, J. Tard ́os, and J. Neira. Divide and conquer: EKF SLAM inO(n).IEEE Transactions on Robotics, 24(5), October 2008. [24] S. Thrun and M. Montemerlo. The graph SLAM algorithm with applications to large-scale mapping of urban structures.Int. J. Rob.Res., 25(5-6):403–429, 2006. [25] B. Triggs, P. F. McLauchlan, R. I. Hartley, and A. W. Fitzibbon. Bundle adjustment - a modern synthesis. InVision Algorithms: Theory and Practice, LNCS, pages 298–375. Springer Verlag, 2000.]]></content>
      <categories>
        <category>slam技术</category>
      </categories>
      <tags>
        <tag>cartographer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[厨房收纳]]></title>
    <url>%2Fhomework-KitchenStorage%2F</url>
    <content type="text"><![CDATA[灶台上塑胶篮 — 碗碟常用餐具伸缩棒 — 挂网 固定绑绳 挂钩 百元商店 勺子毛巾架 —锅盖 防烫手套 灶台下文件盒 — 平底锅死角伸缩棒 挂网: 固定绑绳 挂钩 百元商店 勺子 水槽下滤筛 清洁剂伸缩棒 滤网 架子 毛巾架 水槽上边旅馆 凹字形 做成抽屉]]></content>
      <categories>
        <category>家居收纳</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[冰箱收纳]]></title>
    <url>%2Fhomework-Refrigerator%20storage%2F</url>
    <content type="text"><![CDATA[灶台上塑胶篮 — 碗碟常用餐具伸缩棒 — 挂网 固定绑绳 挂钩 百元商店 勺子毛巾架 —锅盖 防烫手套 灶台下文件盒 — 平底锅死角伸缩棒 挂网: 固定绑绳 挂钩 百元商店 勺子 水槽下滤筛 清洁剂伸缩棒 滤网 架子 毛巾架 水槽上边旅馆 凹字形 做成抽屉]]></content>
      <categories>
        <category>家居收纳</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[健身笔记]]></title>
    <url>%2Fhealth-Fitness%2F</url>
    <content type="text"><![CDATA[本文是硬派健身笔记汇总 训练计划 1 臀腿 大3 肩 小4 背 中6 胸 大 1 臀腿 小3 肩 中5 背 大6 胸 小 小 %85中 %90大 %100 （大训练量=100%max重量、中训练量=90%max、小训练量=85%max） 肩男性肩部重点：前束&amp;中束整体：推举&amp;整体训练要点（中等重量、多次数、多组数、力竭） 后束：俯身侧平举&amp;练肩不粗脖小技巧（内旋） 中束：侧平举&amp;侧平举训练要点（小重量、手臂微屈） 前束：前平举&amp;前平举训练要点（多次数、多组数、力竭训练） 肩部训练计划哑铃平举 站姿俯身侧站姿侧前L侧 屈膝卷腹反向卷腹空中单车开合跳自重侧弓步原地高抬腿靠墙静坐平板支撑 最佳上腹肌 悬腿卷腹下腹肌 垂悬举腿整体 空中单车]]></content>
      <categories>
        <category>运动康复</category>
      </categories>
      <tags>
        <tag>硬派健身</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[向量分析]]></title>
    <url>%2F%E5%90%91%E9%87%8F%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[向量分析是数学的分支，关心拥有两个维度或以上的向量的多元实分析。它有一套方程式及难题处理技巧对物理学及工程学特别有帮助。在微分几何与偏微分方程的研究中起着重要作用。它被广泛应用于物理和工程中，特别是在描述电磁场、引力场和流体流动的时候。 ab]]></content>
      <tags>
        <tag>数学分支</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ceres-solver examples之pose_graph_2d学习笔记]]></title>
    <url>%2Fslam-ceres-cartographer-pose-graph%2F</url>
    <content type="text"><![CDATA[12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061// Constructs the nonlinear least squares optimization problem from the pose// graph constraints.void BuildOptimizationProblem(const std::vector&lt;Constraint2d&gt;&amp; constraints, std::map&lt;int, Pose2d&gt;* poses, ceres::Problem* problem) &#123; CHECK(poses != NULL); CHECK(problem != NULL); if (constraints.empty()) &#123; LOG(INFO) &lt;&lt; "No constraints, no problem to optimize."; return; &#125; ceres::LossFunction* loss_function = NULL; ceres::LocalParameterization* angle_local_parameterization = AngleLocalParameterization::Create(); for (std::vector&lt;Constraint2d&gt;::const_iterator constraints_iter = constraints.begin(); constraints_iter != constraints.end(); ++constraints_iter) &#123; const Constraint2d&amp; constraint = *constraints_iter; std::map&lt;int, Pose2d&gt;::iterator pose_begin_iter = poses-&gt;find(constraint.id_begin); CHECK(pose_begin_iter != poses-&gt;end()) &lt;&lt; "Pose with ID: " &lt;&lt; constraint.id_begin &lt;&lt; " not found."; std::map&lt;int, Pose2d&gt;::iterator pose_end_iter = poses-&gt;find(constraint.id_end); CHECK(pose_end_iter != poses-&gt;end()) &lt;&lt; "Pose with ID: " &lt;&lt; constraint.id_end &lt;&lt; " not found."; const Eigen::Matrix3d sqrt_information = constraint.information.llt().matrixL(); // Ceres will take ownership of the pointer. ceres::CostFunction* cost_function = PoseGraph2dErrorTerm::Create( constraint.x, constraint.y, constraint.yaw_radians, sqrt_information); problem-&gt;AddResidualBlock( cost_function, loss_function, &amp;pose_begin_iter-&gt;second.x, &amp;pose_begin_iter-&gt;second.y, &amp;pose_begin_iter-&gt;second.yaw_radians, &amp;pose_end_iter-&gt;second.x, &amp;pose_end_iter-&gt;second.y, &amp;pose_end_iter-&gt;second.yaw_radians); problem-&gt;SetParameterization(&amp;pose_begin_iter-&gt;second.yaw_radians, angle_local_parameterization); problem-&gt;SetParameterization(&amp;pose_end_iter-&gt;second.yaw_radians, angle_local_parameterization); &#125; // The pose graph optimization problem has three DOFs that are not fully // constrained. This is typically referred to as gauge freedom. You can apply // a rigid body transformation to all the nodes and the optimization problem // will still have the exact same cost. The Levenberg-Marquardt algorithm has // internal damping which mitigate this issue, but it is better to properly // constrain the gauge freedom. This can be done by setting one of the poses // as constant so the optimizer cannot change it. std::map&lt;int, Pose2d&gt;::iterator pose_start_iter = poses-&gt;begin(); CHECK(pose_start_iter != poses-&gt;end()) &lt;&lt; "There are no poses."; problem-&gt;SetParameterBlockConstant(&amp;pose_start_iter-&gt;second.x); problem-&gt;SetParameterBlockConstant(&amp;pose_start_iter-&gt;second.y); problem-&gt;SetParameterBlockConstant(&amp;pose_start_iter-&gt;second.yaw_radians);&#125; Ceres-solver examples之pose_graph_2d学习笔记ceres-solver库是google的非线性优化库，可以对slam问题，机器人位姿进行优化，使其建图的效果得到改善。pose_graph_2d是官方给出的二维平面上机器人位姿优化问题，需要读取一个g2o文件，运行程序后返回一个poses_original.txt和一个poses_optimized.txt，大家按字面意思理解，内部格式长这样： 1234pose_id x y yaw_radianspose_id x y yaw_radianspose_id x y yaw_radians... 得到这两个文件后，用官方提供的plot_results.py可以画出原始和优化后的位姿地图 变量说明重要变量为以下几个：constraints：vector，放入变量的类型为Constraint2d， 含义为机器人两个pose之间的限制，Constraint2d包括两个pose的id，相对坐标x，y，和协方差阵。这个变量描述的是观测量测量量measurement，即机器人认为自己感知到的正确的数据。 poses: map类指针，键值对为id和 Pose2d ，Pose2d是一个由id，世界坐标x，y，yaw角。这个变量描述的是实际机器人的世界坐标位置，是确确实实发生的事实。 关键步骤1234// Ceres will take ownership of the pointer.//将需要的参数传入，设置残差，构造costfunction，使用自动求导方式ceres::CostFunction* cost_function = PoseGraph2dErrorTerm::Create( constraint.x, constraint.y, constraint.yaw_radians, sqrt_information); 详情见下面的Costfunction的搭建。 一、Costfunction的搭建使用ceres库的关键是构造 costfunction ，ceres官方搭建的costfunction，同样有一个类表示，名为PoseGraph2dErrorTerm，具体如下所示：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849class PoseGraph2dErrorTerm &#123; public: PoseGraph2dErrorTerm(double x_ab, double y_ab, double yaw_ab_radians, const Eigen::Matrix3d&amp; sqrt_information) : p_ab_(x_ab, y_ab), yaw_ab_radians_(yaw_ab_radians), sqrt_information_(sqrt_information) &#123;&#125; template &lt;typename T&gt; //x_a,y_a(p_a)x_b,y_b(p_b)是世界下的ab坐标 bool operator()(const T* const x_a, const T* const y_a, const T* const yaw_a, const T* const x_b, const T* const y_b, const T* const yaw_b, T* residuals_ptr) const &#123; const Eigen::Matrix&lt;T, 2, 1&gt; p_a(*x_a, *y_a); const Eigen::Matrix&lt;T, 2, 1&gt; p_b(*x_b, *y_b); //map映射类 将外部传进来的residuals_ptr映射到matrix&lt;3,1&gt;，取名为residuals_map Eigen::Map&lt;Eigen::Matrix&lt;T, 3, 1&gt; &gt; residuals_map(residuals_ptr); residuals_map.template head&lt;2&gt;() = RotationMatrix2D(*yaw_a).transpose() * (p_b - p_a) - p_ab_.cast&lt;T&gt;(); residuals_map(2) = ceres::examples::NormalizeAngle( (*yaw_b - *yaw_a) - static_cast&lt;T&gt;(yaw_ab_radians_)); // Scale the residuals by the square root information matrix to account for // the measurement uncertainty. residuals_map = sqrt_information_.template cast&lt;T&gt;() * residuals_map; return true; &#125; //静态成员函数 构造costfunction AutoDiffCostFunction 残差参数为3维 其他参数每个1维(参数是operator里的参数) static ceres::CostFunction* Create(double x_ab, double y_ab, double yaw_ab_radians, const Eigen::Matrix3d&amp; sqrt_information) &#123; return (new ceres::AutoDiffCostFunction&lt;PoseGraph2dErrorTerm, 3, 1, 1, 1, 1, 1, 1&gt;(new PoseGraph2dErrorTerm( x_ab, y_ab, yaw_ab_radians, sqrt_information))); &#125; EIGEN_MAKE_ALIGNED_OPERATOR_NEW private: // The position of B relative to A in the A frame. const Eigen::Vector2d p_ab_; // The orientation of frame B relative to frame A. const double yaw_ab_radians_; // The inverse square root of the measurement covariance matrix. const Eigen::Matrix3d sqrt_information_;&#125;; 其中包括：一个构造函数PoseGraph2dErrorTerm(x_ab, y_ab, yaw_ab_radians, sqrt_information)；一个运算符重载operator()(x_a, y_a, yaw_a, x_b, y_b, yaw_b, residuals_ptr)，其中residuals_ptr指向的东西是计算出的残差；一个构造costfunction的函数Create(x_ab, y_ab, yaw_ab_radians,&amp; sqrt_information)。 operator()的作用传入参数计算残差，残差有三维，如下所示：residual = information1/2 [ raT (pb - pa) - hat( pab ) ] （2维）[ Normalize(yawb - yawa - hat( yawab ) ) ] （1维） 其中ra 是 timestep a 时从当前坐标系转向世界坐标系的旋转矩阵， pb 和 pa 是世界坐标系下timestep a 和 b 时的机器人位置，带hat的是测量值，是在时刻a时机器人坐标系下观察的测量值。 Create函数的作用用来构造一个costfunction类，与一般不同的是，main函数里调用Create函数来构造costfunction.定义求导方式，官方例程里定义的是自动求导方式，即ceres::AutoDiffCostFunction，&lt;&gt;里的参数是我们的PoseGraph2dErrorTerm类，和优化变量的维数，详情见代码注释。 二、构造Problem当costfunction搭建好后，给每个constraint都加入残差快AddResidualBlock, 官方例程没有用核函数，传入costfunction，传入待优化参数即可。123456//添加problem 待优化的参数和PoseGraph2dErrorTerm里的operator保持一致problem-&gt;AddResidualBlock( cost_function, loss_function, &amp;pose_begin_iter-&gt;second.x, &amp;pose_begin_iter-&gt;second.y, &amp;pose_begin_iter-&gt;second.yaw_radians, &amp;pose_end_iter-&gt;second.x, &amp;pose_end_iter-&gt;second.y, &amp;pose_end_iter-&gt;second.yaw_radians); 三、LocalParameterization搭建理论详情见( https://blog.csdn.net/HUAJUN998/article/details/76222745 ），目的是利用一个增量构造Jacobian矩阵更新变量，具体不是很懂。官方例程只用它优化了yaw角，官方例程按照ceres库内的autodiff_local_parameterization.h定义方法定义了一个AngleLocalParameterization类，写在了例程中的angle_local_parameterization.h中，如下所示：// Defines a local parameterization for updating the angle to be constrained in// [-pi to pi).class AngleLocalParameterization { public: template bool operator()(const T theta_radians, const T delta_theta_radians, T theta_radians_plus_delta) const { theta_radians_plus_delta = NormalizeAngle(theta_radians + delta_theta_radians); return true; } //构造LocalParameterization函数，使用自动求导 //参数目前不懂什么意思，应该是operator中输入输出参数的维数，Global Size和Local size static ceres::LocalParameterization* Create() { return (new ceres::AutoDiffLocalParameterization); }}; 然后在主程序制造优化问题时，在迭代constraints之前就create了角度的localparameterization：123//构造yaw角度的localparameterization，更新角度 yaw_new = yaw + △yawceres::LocalParameterization* angle_local_parameterization = AngleLocalParameterization::Create(); 等到迭代遍历时，就加入了每一个constraint内两个pose的yaw角，如下所示：12345//为yaw角设置localparameterizationproblem-&gt;SetParameterization(&amp;pose_begin_iter-&gt;second.yaw_radians, angle_local_parameterization);problem-&gt;SetParameterization(&amp;pose_end_iter-&gt;second.yaw_radians, angle_local_parameterization); 四、固定初始位姿官方例程上讲，优化问题是三个自由度的，没有造成互相之间完全的限制，这个问题叫做规范自由度（gauge freedom），详情见规范固定 ，具体不懂，反正按官方例程的意思是要固定第一个pose，不让它进行优化。 // The pose graph optimization problem has three DOFs that are not fully // constrained. This is typically referred to as gauge freedom. You can apply // a rigid body transformation to all the nodes and the optimization problem // will still have the exact same cost. The Levenberg-Marquardt algorithm has // internal damping which mitigate this issue, but it is better to properly // constrain the gauge freedom. This can be done by setting one of the poses // as constant so the optimizer cannot change it. //规范固定，通过将一个pose设定成常量来限制规范自由度，具体含义不懂123456std::map&lt;int, Pose2d&gt;::iterator pose_start_iter = poses-&gt;begin();CHECK(pose_start_iter != poses-&gt;end()) &lt;&lt; "There are no poses.";problem-&gt;SetParameterBlockConstant(&amp;pose_start_iter-&gt;second.x);problem-&gt;SetParameterBlockConstant(&amp;pose_start_iter-&gt;second.y);problem-&gt;SetParameterBlockConstant(&amp;pose_start_iter-&gt;second.yaw_radians); 五、相关链接以上是程序的主要问题，关于cpp的基础知识可参考下方链接：ceres-solver官方教程]]></content>
      <categories>
        <category>slam技术</category>
      </categories>
      <tags>
        <tag>cartographer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[latex]]></title>
    <url>%2Ftools-latex%2F</url>
    <content type="text"><![CDATA[latex用这个漂亮的工具将方程式截图迅速转换为 LaTeX Markdown语法和LaTeX数学记号速查手册]]></content>
      <categories>
        <category>工具教程</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[吴恩达《深度学习》系列课程个人笔记]]></title>
    <url>%2Fdeep-learning-AndrewNgDeepLearningNotes%2F</url>
    <content type="text"><![CDATA[吴恩达《深度学习》系列课程个人笔记]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>Testing</tag>
        <tag>Another Tag</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[graph slam ceres 实现]]></title>
    <url>%2Fslam-GraphSLAM-ceres%2F</url>
    <content type="text"><![CDATA[本文是graph-slam 理论部分: ceres的实现部分 e = (x_0)^2 + (x_1 - x_0 - 1)^2 + (l_0 - x_0 - 2)^2 + (l_0 - x_1 - 0.8)^2123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107#include &lt;vector&gt;#include &lt;iomanip&gt;#include "ceres/ceres.h"#include "gflags/gflags.h"#include "glog/logging.h"using ceres::AutoDiffCostFunction;using ceres::CostFunction;using ceres::Problem;using ceres::Solver;using ceres::Solve;struct F1 &#123; template &lt;typename T&gt; bool operator()(const T* const x1, const T* const x2, T* residual) const &#123; // f1 = x0; residual[0] = x1[0]; return true; &#125;&#125;;struct F2 &#123; template &lt;typename T&gt; bool operator()(const T* const x1, const T* const x0, T* residual) const &#123; // f2 = (x1 - x0 -1.0) residual[0] = x1[0] - x0[0] - 1.0; return true; &#125;&#125;;struct F3 &#123; template &lt;typename T&gt; bool operator()(const T* const l0, const T* const x0, T* residual) const &#123; // f3 = l0 - x0 - 2.0 residual[0] = l0[0] - x0[0] - 2.0; return true; &#125;&#125;;struct F4 &#123; template &lt;typename T&gt; bool operator()(const T* const l0, const T* const x1, T* residual) const &#123; // f4 = lo - x1 - 0.8 residual[0] = l0[0] - x1[0] - 0.8; return true; &#125;&#125;;DEFINE_string(minimizer, "trust_region", "Minimizer type to use, choices are: line_search &amp; trust_region");int main(int argc, char** argv) &#123; CERES_GFLAGS_NAMESPACE::ParseCommandLineFlags(&amp;argc, &amp;argv, true); google::InitGoogleLogging(argv[0]); double x0 = 0.0; double x1 = 1.0; double l0 = 2.0;// double x4 = 1.0; Problem problem; // Add residual terms to the problem using the using the autodiff // wrapper to get the derivatives automatically. The parameters, x0 through // x4, are modified in place. problem.AddResidualBlock(new AutoDiffCostFunction&lt;F1, 1, 1, 1&gt;(new F1), NULL, &amp;x0, &amp;x1); problem.AddResidualBlock(new AutoDiffCostFunction&lt;F2, 1, 1, 1&gt;(new F2), NULL, &amp;x1, &amp;x0); problem.AddResidualBlock(new AutoDiffCostFunction&lt;F3, 1, 1, 1&gt;(new F3), NULL, &amp;l0, &amp;x0); problem.AddResidualBlock(new AutoDiffCostFunction&lt;F4, 1, 1, 1&gt;(new F4), NULL, &amp;l0, &amp;x1); Solver::Options options; LOG_IF(FATAL, !ceres::StringToMinimizerType(FLAGS_minimizer, &amp;options.minimizer_type)) &lt;&lt; "Invalid minimizer: " &lt;&lt; FLAGS_minimizer &lt;&lt; ", valid options are: trust_region and line_search."; options.max_num_iterations = 100; options.linear_solver_type = ceres::DENSE_QR; options.minimizer_progress_to_stdout = true; std::cout &lt;&lt; "Initial x0 = " &lt;&lt; std::setprecision(4)&lt;&lt; x0 &lt;&lt; ", x1 = " &lt;&lt; x1 &lt;&lt; ", l0 = " &lt;&lt; l0 &lt;&lt; "\n"; // Run the solver! Solver::Summary summary; Solve(options, &amp;problem, &amp;summary); std::cout &lt;&lt; summary.FullReport() &lt;&lt; "\n"; std::cout &lt;&lt; "Final x0 = " &lt;&lt; x0 &lt;&lt; ", x1 = " &lt;&lt; x1 &lt;&lt; ", l0 = " &lt;&lt; l0 &lt;&lt; "\n"; return 0;&#125; ceres-solver官网]]></content>
      <categories>
        <category>slam技术</category>
      </categories>
      <tags>
        <tag>cartographer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Scan Matching in 2D SLAM by 张明明]]></title>
    <url>%2Fslam-lidar-scan-matching-in-2d-slam%2F</url>
    <content type="text"><![CDATA[【泡泡机器人公开课】第二十三课：Scan Matching in 2D SLAM by 张明明 概述 Scan Matching两类Real-Time Loop Cloare in 2D LIDAR SLAM.ICRA2016,提到scan matching的两种方法 scan-to-ccan —ICP,etc 计算成本大 累积误差,需进行闭环 容易进行闭环检测scan-to-map matching —Hector SLAM,etc 误差累积小计算成本小 难以闭环更进一步的算法 2.ICPPL-ICP(开源,ros)典型的是PL-ICP,一般icp是点到点的二阶最小均平和(ICP variant using a point to linear metric ICRA2009),速度快,大的旋转不够鲁棒公式:论文: PL-ICP加闭环（g2o） 关键帧的选择策略 如何闭环对之前的关键帧进行搜索 有一个大的旋转就选择一个关键帧缺点：没有submap(基于视觉的闭环), 有个局部小闭环， google 也是一个小闭环(不开源) Hector Slam]]></content>
      <categories>
        <category>slam技术</category>
      </categories>
      <tags>
        <tag>cartographer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cartographer源码阅读 约束]]></title>
    <url>%2Fslam-cartographer-read-sources%2F</url>
    <content type="text"><![CDATA[成分 内部（intra):有两类, 同个子地图，同个轨迹之间的约束，由子地图内部个节点相对自地图位姿得到，也就是节点在自地图的位姿 同个相邻自地图，同个轨迹之间的约束，节点在上一个自地图的位姿如下图所示: 图中可见，不同自地图的约束用不同颜色表示 2 残差（recidual）: trajectory_node_pose为节点在全局地图中的位姿，而constraint_pose为约束所对应节点在自地图转化为全局地图的位姿二者之差为残差， 外部(inter):有两类, 1.同个轨迹，不同自地图之间的约束，2.不同轨迹不同自地图之间的约束.简单起见我们自讨论同轨迹 为回环检测到的约束 123for (const auto&amp; submap_id : finished_submap_ids) &#123; ComputeConstraint(node_id, submap_id); &#125; 12345678910111213ceres_scan_matcher_.Match(pose_estimate.translation(), pose_estimate, constant_data-&gt;filtered_gravity_aligned_point_cloud, *submap_scan_matcher.grid, &amp;pose_estimate, &amp;unused_summary);const transform::Rigid2d constraint_transform = ComputeSubmapPose(*submap).inverse() * pose_estimate;constraint-&gt;reset(new Constraint&#123;submap_id, node_id, &#123;transform::Embed3D(constraint_transform), options_.loop_closure_translation_weight(), options_.loop_closure_rotation_weight()&#125;, Constraint::INTER_SUBMAP&#125;);]]></content>
      <categories>
        <category>slam技术</category>
      </categories>
      <tags>
        <tag>cartographer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[graph slam 理论]]></title>
    <url>%2Fslam-GraphSLAM-theory%2F</url>
    <content type="text"><![CDATA[graph slam 理论 什么是graph slam图优化是比较常用的后端优化，cartographer也用到了这个方法。假设有个一机器人，在初始位置$x_0$为0，先前移动1，看到了路标$l_0$为2，到达$x_2$的位置之后看到路标$l_0$的距离时0.8, 如图所示: 从$x_0$到$x_1$的距离其实是不确定的，不能够以1来表示，因为会有误差，学过卡尔曼就知道他的概率分布其实是 \frac{1}{\sqrt{2\pi\delta}}\exp^{1/2}\frac{(x_1 - x_0 - 1)^2}{\delta^2}是一个距离x0为1的正态分布。 上图中同样其他的边也是展示了这种节点与节点的约束.我们要做的就是通过建立这中约束然后通过这种约束求得最优解。上图中有三种约束： x_0 : 0 \\ x_0 -> x_1: 1 \\ x_0 -> l_0: 2 \\ x_1 -> l_0: 0.8其中$x_0=0$被称为”初始位姿约束” $x_0 -&gt; x_1: 1$被称为”初始位姿约束” $x_0 -&gt; l_0: 2 x_1 -&gt; l_0: 0.8$ 为 “相对测量约束” 这些约束只有初始位姿约束时绝对的，所以在后面优化之后初始位姿不会变，这也要求初始位精度一定要高，不然后面的推断都会出错 推导过程我们现在讲解一下求解最优值的过程，根据上面的约束，我们可以得到四个方程 \left \lbrace \begin{aligned} x_0 = 0 \\ x_1 - x_0 -1 = 0 \\ l_0 - x_0 - 2 = 0 \\ l_0 - x_1 - 0.8 = 0 \end{aligned} \right .使用最小二乘法 \underset{x}{min}\sum_i^4e() = = (x_0)^2 + (x_1 - x_0 - 1)^2 + (l_0 - x_0 - 2)^2 + (l_0 - x_1 - 0.8)^2分别对$x_0$, $x_1$, $l_0$求偏导数 \begin{array} { l } { \frac { \partial c } { \partial x _ { 0 } } = 2 x _ { 0 } - 2 \left( x _ { 1 } - x _ { 0 } - 1 \right) - 2 \left( l _ { 0 } - x _ { 0 } - 2 \right) } = 0\\ { \frac { \partial c } { \partial x _ { 1 } } = 2 \left( x _ { 1 } - x _ { 0 } - 1 \right) - 2 \left( l _ { 0 } - x _ { 1 } - 0.8 \right) } = 0\\ { \frac { \partial c } { \partial l _ { 0 } } = 2 \left( l _ { 0 } - x _ { 0 } - 2 \right) + 2 \left( l _ { 0 } - x _ { 1 } - 0.8 \right) } =0 \end{array}最终得到 \left[ \begin{array} { c c c } { 3 } & { - 1 } & { - 1 } \\ { - 1 } & { 2 } & { - 1 } \\ { - 1 } & { - 1 } & { 2 } \end{array} \right] \left[ \begin{array} { c } { x _ { 0 } } \\ { x _ { 1 } } \\ { l _ { 0 } } \end{array} \right] = \left[ \begin{array} { r } { - 3.0 } \\ { 0.2 } \\ { 2.8 } \end{array} \right] \quad \text { or } \quad \Omega \mu = \xi接着矩阵求解线性方程组： \mu = \Omega ^ { - 1 } \xi = \left[ \begin{array} { c c c } { 3 } & { - 1 } & { - 1 } \\ { - 1 } & { 2 } & { - 1 } \\ { - 1 } & { - 1 } & { 2 } \end{array} \right] ^ { - 1 } \left[ \begin{array} { r } { - 3.0 } \\ { 0.2 } \\ { 2.8 } \end{array} \right] = \left[ \begin{array} { r } { 0 } \\ { 1.07 } \\ { 1.93 } \end{array} \right]得到路标和机器人位姿： x _ { 0 } = 0 , x _ { 1 } = 1.07 , \text { and } l _ { 0 } = 1.93矩阵// todo 裁简// todo 参考udacity ai-for robots 系列视频306到332 graph slam tutorial : 从推导到应用1 深入理解图优化与g2o：图优化篇 Cartographer的原理探究——GraphSLAM理论基础]]></content>
      <categories>
        <category>slam技术</category>
      </categories>
      <tags>
        <tag>cartographer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cartographer源码解析之sensor]]></title>
    <url>%2Fslam-cartographer-sensor%2F</url>
    <content type="text"><![CDATA[cartographer源码解析之sensor 目录解析ImuTracker: 使用IMU的角速度和线性加速度跟踪方向。 因为平均线性加速度（假设慢速运动）是重力的直接测量，所以滚动/俯仰不会漂移，尽管是偏航。 Map_build: 使用用于局部子图TrajectoryBuilders和用于闭环的PoseGraph来连接整个SLAM堆栈。成员只有五个 MapBuilderOptions; thread_pool_; pose_graph_; CollatorInterface sensor_collator_; trajectory_builders_ all_trajectory_builder_options_; ,其中pose_graph_用于全局优化， trajectory_builders_用于子地图构建. sensor_collator_ 用于数据收集 我们先看sensor_collator_,sensor_collator_ SensorInterface # 图优化 Real-time correlative scan matching 论文算法分析 Cartographer 的前端算法思路 cartographer Documentation]]></content>
      <categories>
        <category>slam技术</category>
      </categories>
      <tags>
        <tag>cartographer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cartographer 调参日记]]></title>
    <url>%2Fslam-cartographer-turn%2F</url>
    <content type="text"><![CDATA[cartographer 2d 调参 准备使用1.0.0版本,因为公司扫地机用的是indigo版本,而我本机是用kinect版,所以我使用了docker来查看和调用rvizDocker.indigo需要做些更改 ARG CARTOGRAPHER_VERSION=release-1.0 cmake 升级到3.2版以上 调参第一天先从’/opt/ros/indigo/share/cartographer_ros/configuration’,如果找不到再到’/usr/share/cartographer-ros’找 map 通常是map tracking_frame: 由SLAM算法跟踪的帧的ROS帧ID。如果使用IMU，它应该在其位置，尽管它可能是旋转的。一个常见的选择是“imu_link”。 不明,不用imu,写了odom, published_frame: ROS帧ID用作发布姿势的子帧。例如，如果“odom”帧由系统的不同部分提供，则为“odom”。在这种情况下，map_frame中的“ odom ” 姿势将被发布。否则，将其设置为“base_link”可能是合适的。 不明,写了odom odom_frame: 仅在provide_odom_frame为true时使用。published_frame 和map_frame之间的框架，用于发布（非循环关闭）本地SLAM结果。通常是“odom”。 provide_odom_frame: 如果启用，则本地非闭环连续姿势将作为map_frame中的odom_frame发布。 use_odometry: 如果启用，请在主题“ odom ”上订阅nav_msgs / Odometry。在这种情况下必须提供测距，并且信息将包含在SLAM中 2d use_imu_data 如果不用false先关闭全局slam hit_probability 激光击中黑的程度 miss_probability 激光击不中白的程度 online_correlative_scan_matching 更新initial_ceres_pose位置ceres_scan_matcher_ pose_observation ,summary]]></content>
      <categories>
        <category>slam技术</category>
      </categories>
      <tags>
        <tag>cartographer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cartographer源码解析之local_slam]]></title>
    <url>%2Fslam-cartographer-local_slam%2F</url>
    <content type="text"><![CDATA[cartographer源码解析之local_slam LocalTrajectoryBuilderReturns ‘MatchingResult’ when range data accumulation completed,otherwise ‘nullptr’. Range data must be approximately horizontalfor 2D SLAM. TimedPointCloudData::time is when the last point inrange_data was acquired, TimedPointCloudData::ranges contains therelative time of point with respect to TimedPointCloudData::time. LocalTrajectoryBuilderAddImuData添加imuData extrapolator_局部地图的位姿推断器。cartographer_ros不一样,addImuData时添加 雷达数据的处理过程Node::HandleLaserScanMessageSensorBridge::HandleLaserScanMessage ToPointCloudWithIntensities HandleLaserScan HandleRangefinderCollatedTrajectoryBuilder AddSensorData AddDataCollator::AddSensorDataOrderedMultiQueue::Add Dispatch callback global_trajectory_builder::AddSensorDataLocalTrajectoryBuilder2D::AddRangeDataRangeDataCollator::AddRangeData extrapolator_-&gt;ExtrapolatePose accumulated_range_data_ TransformToGravityAlignedFrameAndFilterAddAccumulatedRangeDataTransformRangeDatalocal_slam_result_callback_OnLocalSlamResultGetTrajectoryStatesscan_matched_point_cloud_publisher_ Imu的处理过程Node::HandleImuMessage sensor_samplers_ 分频，脉冲未到不处理 extrapolators_.at(trajectory_id).AddImuDataSensorBridge::HandleImuMessageCollatedTrajectoryBuilder::AddDataCollator::AddSensorDataOrderedMultiQueue::AddBlockingQueue::Push, Dispatch callbackLocalTrajectoryBuilder2D::AddImuDataPoseExtrapolator::AddImuDataPoseGraph2D::AddImuDataOptimizationProblem2D::AddImuData Odometry的处理过程Node::HandleOdometryMessage sensor_samplers_ 分频，脉冲未到不处理 extrapolators_.at(trajectory_id).AddOdometryData 角速度和线速度SensorBridge::HandleOdometryMessageCollatedTrajectoryBuilder::AddDataCollator::AddSensorDataOrderedMultiQueue::AddBlockingQueue::Push, Dispatch callbackLocalTrajectoryBuilder2D::AddOdometryDataPoseExtrapolator::AddOdometryDataPoseGraph2D::AddOdometryDataOptimizationProblem2D::AddOdometryData]]></content>
      <categories>
        <category>slam技术</category>
      </categories>
      <tags>
        <tag>cartographer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cartographer源码解析]]></title>
    <url>%2Fslam-cartographer-notes%2F</url>
    <content type="text"><![CDATA[cartographer源码解析流程 AddNode 核心函数是ComputeConstraintsForNode,为节点添加约束，并且在后台开始扫描匹配.node_id是分配的节点号，insertion_submap是允许插入的子地图，即最后两张，newly_finished_submap最后第二张子地图是否刚满（完成）WorkItem::Result ComputeConstraintsForNode(node_id, insertion_submaps, newly_finished_submap); ComputeConstraintsForNode 把轨迹节点添加到optimization_problem_.optimization_problem_-&gt;AddTrajectoryNode( matching_id.trajectory_id, optimization::NodeSpec2D{constant_data-&gt;time, local_pose_2d, global_pose_2d, constant_data-&gt;gravity_alignment}) 2.遍历正在插入子图，填充图优化数据中的子地图数据和内部约束。data_.submap_data.at(submap_id).node_ids.emplace(node_id);data_.constraints.push_back( Constraint{submap_id, node_id, {transform::Embed3D(constraint_transform), options_.matcher_translation_weight(), options_.matcher_rotation_weight()}, Constraint::INTRA_SUBMAP}); trajectory_nodes_.at(node_id).constant_dataconstant_data-&gt;local_pose()submap.local_pose() constraint_transform]]></content>
      <categories>
        <category>slam技术</category>
      </categories>
      <tags>
        <tag>cartographer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cartographer论文翻译:2d-lidar-slam的实时闭环]]></title>
    <url>%2Fslam-real-time-loop-closure-in-2d-lidar-slam%2F</url>
    <content type="text"><![CDATA[摘要LIDAR SLAM是获取平面地图的有效方法。 构建便携式捕获平台需要在有限的计算资源下操作。 我们介绍了我们的背包绘图平台中使用的方法，该平台实现了5厘米分辨率的实时构图和闭环。 为了实现实时闭环，我们使用branch-and-bound将扫描到Submap匹配计算为约束。 I. 简介本文的贡献是一种新的方法，用于降低计算激光数据的闭环约束的需求量。 II. 相关工作Scan-to-scan matching经常用于激光SLAM中计算相对姿态变化，例如[1] - [4]。 它的缺点是很快就会累积误差。 Scan-to-map matching有助于限制误差的累积。使用Gauss-Newton在线性插值地图上找到局部最优的一种方法是[5]。在存在良好的位姿初始估计的情况下，在这种情况下通过使用足够高的数据速率LIDAR提供，局部优化的Scan-to-map matching是有效且稳健的。在不稳定的平台上，使用惯性测量单元（IMU）将激光投影到水平面上以估计重力方向。 pixel-accurate scan matching方法，如[1]，进一步减少了局部误差累积。虽然计算上更昂贵，但这种方法对于闭环检测很有用。 一些方法着重于通过匹配激光扫描的提取特征来改善计算成本[4]。其他用于闭环检测方法包括基于直方图的匹配[6]，扫描数据中的特征检测，以及使用机器学习[7]。 解决累积局部误差的两种常用方法是粒子滤波器和基于图形的SLAM [2]，[8]。 基于图形的方法适用于表示位姿和特征的节点集合。 图中的边是由观察产生的约束。 可以使用各种优化方法来最小化由所有约束引入的误差，例如， [11]，[12]。在[13]中描述了这种用于室外SLAM的系统，其使用基于图的方法，局部scan-to-scan匹配，以及基于Submap特征的直方图的重叠局部图的匹配。 III. 系统概述Cartographer可实时室内绘图，生成分辨率为5cm的2D网格地图。 Laser scans被插入到最优估算位姿的Submap中，假定在短时间内足够准确。 而Scan match发生在最近的Submap上，因此它只取决于最近的扫描，全局误差会累积。 cartographer 定期运行位姿优化来减少误差积累。当一个Submap完成时，就不会再将新的扫描插入其中，它将参与Scan match以获得闭环。所有已完成的Submap和扫描都会自动考虑进行闭环。如果它们基于当前的位姿估计足够接近，则Scan match器试图在Submap中找到扫描。如果在当前估计位姿的搜索窗口中找到足够好的匹配，则将其作为闭环约束添加到优化问题。 通过每隔几秒完成一次优化，我们的经验就是当重新访问位置时立即闭环。这导致了软实时约束，即闭环Scan match必须比添加新扫描更快，否则它会明显落后,闭环失败。我们通过对每个完成的Submap使用branch-and-bound和几个预先计算的网格来实现这一点。 IV. 局部2d slam我们的系统将单独的局部和全局方法结合到2D SLAM中。两种方法都优化了由LIDAR观测的（x，y）平移和旋转ξθ组成的姿态ξ=（ξx，ξy，ξθ），其进一步被称为扫描。在不平的地面上，IMU用于估计重力方向，将扫描从水平安装的LIDAR投影到2D世界。在我们的局部方法中，每个连续扫描与Submap相匹配，使用非线性优化将扫描与Submap对齐; 该过程称为real time Scan match,其随着时间累积误差，我们的全局方法将其去除，如第五节所述。 A. ScansSubmap构造是重复对齐scan和Submap坐标帧的迭代过程。随着扫描的原点在$0 \in \Bbb R^2$，我们现在将关于扫描点的信息写为$H = \lbrace h_k\rbrace _{k=1,…,K}, h_k \in \Bbb R^2$。Submap帧中扫描帧的姿态$\xi$表示为变换$T_\xi$，它将扫描点从扫描帧严格转换为Submap帧，定义为 T_\xi = \underbrace{ \left( \begin {matrix} cos\xi_\delta & -sin\xi_\delta \\ sin\xi_\delta & sin\xi_\delta \end{matrix} \right)}_{R_\xi} p + \underbrace{ \left(\begin {matrix} \xi_x \\ \xi_y \end{matrix} \right)}_{t_\xi}. \tag1B. Submaps一些连续扫描用于构建Submap。这些Submap采用概率网格的形式$M : \gamma \Bbb Z × \gamma \Bbb Z \rightarrow [p_{min}, p_{max}]$，它以给定分辨率r的离散网格点进行映射，例如5厘米，到值。这些值可以被认为是网格点被阻挡的概率。对于每个网格点，我们将相应的像素定义为最接近该网格点的所有点。每当要将扫描插入概率网格时，计算用于命中的一组网格点和用于未命中的不相交组。对于每次击中，我们将最近的网格点插入到命中集中。对于每个未命中，我们插入与每个像素相关联的网格点，该网格点与扫描原点和每个扫描点之间的一条光线相交，不包括已经在命中集中的网格点。如果每个以前未观察到的网格点位于其中一个集合中，则会为其分配概率$p_{hit}$ 或 $p_{miss}$。如果已经观察到网格点x，我们更新命中和未命中的几率 odds(p) = \frac{p}{1-p}, \tag1 M_{new}(x) = clamp(odds^{-1}(odds(M_{old}(x))\cdot odds(p_{hit}))) \tag1and equivalently for misses 等同于未命中 C. Ceres scan matching在将扫描插入Submap之前，扫描位姿ξ相对于当前局部Submap进行优化（使用Ceresbased [14]Scan match器）。 扫描匹配器负责在Submap中的扫描点处找到最大概率的扫描位姿。 我们将其视为非线性最小二乘问题 \underset {\xi}{argmin} \sum_{k=1}^K(1-M_(smooth(T_\xi h_k)))^2其中$T\xi$根据扫描位姿将$h_k$从scan帧变换到Submap帧。函数$M_{smooth} : \Bbb R^2 → \Bbb R$是局部Submap中概率值的平滑版本。我们使用双三次插值。结果，可以发生区间$[0, 1]$之外的值，但是被认为是无关紧要的。这种平滑函数的数学优化通常比网格的分辨率提供更好的精度。由于这是局部优化，因此需要良好的初始估计。能够测量角速度的IMU可用于估计Scan match之间的位置的旋转分量$\theta$。虽然计算密集程度更高，但可以在没有IMU的情况下使用更高频率的Scan match或像素精确扫描匹配方法。 V. 闭环由于扫描仅与包含少量最近扫描的Submap匹配，因此上述方法会慢慢累积误差。对于仅几十次连续扫描，累积误差很小。通过创建许多小Submap来处理更大的空间。我们的方法，优化所有扫描和Submap的位姿，遵循稀疏位姿调整[2]。插入扫描的相对位姿存储在内存中，以用于闭环优化。除了这些相对位姿之外，一旦Submap不再发生变化，所有其他由scan和Submap组成的对都被认为是闭环。global scan matcher在后台运行，如果找到良好匹配，则会将相应的相对位姿添加到优化问题中 A. 优化问题闭环优化，和Scan match一样，也被称为非线性最小二乘问题，它允许轻松添加残差以考虑其他数据。每隔几秒钟，我们使用Ceres [14]来计算解决方案 \underset{\Xi ^m,\Xi ^n}{argmin} \frac{1}{2}\sum _{ij}\rho (E^2(\xi _i^m,\xi _j^s;\sigma _{ij},\xi _{ij}))\tag{SPA}在给定一些约束的情况下，Submap构成$\Xi^m = \lbrace\xi_i^m\rbrace_{i=1,…,m}$和世界中的扫描构成$\Xi^s = \lbrace\xi_j^s\rbrace_{j=1,…,n}$被优化。这些约束采用相对位姿$\xi_{ij}$和相关协方差矩阵$\Sigma_ij$的形式。对于一对Submapi和扫描j，位姿ξij描述了Submap坐标系中Scan match的位置。协方差矩阵Σij可以被评估，例如，遵循[15]中的方法，或者局部地使用Ceres [14]与（CS）的协方差估计特征。这种约束的残差E由下式计算 E^2(\xi_i^m, \xi_j^s;\Sigma_{ij},\xi_{ij}) = e(\xi_i^m,\xi_j^s;\xi_{ij})^T\Sigma_{ij}^{-1}e(\xi_i^m,\xi_j^s;\xi_{ij}),\tag4 e(\xi_i^m,\xi_j^s;\xi_{ij}) = \xi_{ij} - \left( \begin{matrix} R_{\xi_i^m}^{-1}(t_{\xi_i^m}-t_{\xi_j^s}) \\ \xi_{ij} - \xi_{j;\theta}^s \end{matrix} \right).\tag5损失函数$\rho$，例如Huber loss，用于减少当Scan match为优化问题添加不正确约束时可能出现在（SPA）中的异常值的影响。例如，这可能发生在局部对称环境中，例如办公室隔间。异常值的替代方法包括[16]。 B. Branch-and-bound scan match我们对最佳的像素精确匹配感兴趣 \xi^* = \underset{\xi\in\omega}{argmax}\sum_{k=1}^kM_{nearest}(T_\xi h_k)),\tag{BBS}其中$\omega$是搜索窗口，$M_{nearest}$是M扩展到所有$\Bbb R^2$，首先将其参数四舍五入到最近的网格点，即将网格点的值扩展为相应的像素。使用（CS）可以进一步提高匹配的质量。 通过仔细选择步长来提高效率。我们选择角度步长$\xi_\theta$，以便最大范围$d_{max}$的扫描点移动不超过$r$，即一个像素的宽度。我们推导出使用余弦定律 d_{max} = \underset{k=1,...,K}{max} \|h_k\|,\tag6 \\ \xi_\theta = arccos(1-\frac{r^2}{2d_max^2})\tag7我们计算了包含给定线性和角度搜索窗口大小的整数步骤，例如$W_x=W_y=7m$和$W_\theta=30\degree$ w_x = \lceil\frac{W_x}{r}\rceil,\ w_y = \lceil\frac{W_y}{r}\rceil,\ w_\theta = \lceil\frac{W_\theta}{\xi_\theta}\rceil.\tag8这导致一个有限的集$W$形成一个围绕估计$\xi_\theta$放置在其中心的搜索窗口， \overline{W} = \{-w_x,...,w_x\} \times \{-w_y,...,w_y\} \times \{-w_\theta,...,w_\theta\}\tag9 W = \{\xi_0 + (rj_x, rj_y, \xi_\theta j_\theta):(j_x,j_y,j_\theta) \in \overline{W}\}\tag{10}找到$\xi^*$的朴素算法很容易制定，参见算法1，但对于搜索窗口大小，我们考虑到它会太慢。 相反，我们使用branch-and-bound在较大的搜索窗口上有效地计算$\xi^*$。有关通用方法，请参见算法2。 这种方法最初是在混合整数线性程序的背景下提出的[17]。关于这个主题的文献很广泛; 见[18]简短概述。主要思想是将可能性子集表示为树中的节点，其中根节点表示所有可能的解决方案，在我们的示例中为$W$。每个节点的子节点形成其父节点的分区，因此它们一起表示同一组可能性。叶节点是单体; 每个代表一个可行的解决方案。请注意，算法是准确的。只要内部节点c的得分（c）是其元素得分的上限，它就提供与朴素方法相同的解决方案。在这种情况下，每当节点有界时，在该子树中不存在比目前最熟知的解决方案更好的解决方案。 为了得到具体的算法，我们必须决定节点选择，分支和上界计算的方法。 1) 节点选择:在没有更好的替代方案的情况下，我们的算法使用深度优先搜索（DFS）作为默认选择：算法的效率取决于被修剪的树的大部分。这取决于两件事：良好的上限和良好的当前解决方案。后一部分由DFS帮助，它可以快速评估许多叶节点。由于我们不希望将不良匹配作为闭环约束添加，我们还引入了一个分数阈值，低于该分数阈值我们对最优解决方案不感兴趣。由于实际上不会经常超过阈值，这降低了节点选择或找到初始启发式解决方案的重要性。关于在DFS期间访问孩子的顺序，我们计算每个孩子的分数的上限，访问具有最大边界的最有希望的子节点。算法3是这种方法。 2) 分支规则：树中的每个节点由整数元组$c=（c_x，c_y，c_θ，c_h）\in\Bbb Z^4$描述。高度为ch的节点最多可合并$2^{ch}\times2^{ch}$可能的翻译，但代表一个特定的轮换： \overline {\overline{W}} = \Bigg(\{j_x,j_y\} \in \Bbb{Z}^2: \\ \Big\lbrace \begin{array}{l} c_x \leq j_x < c_x + 2^{ch} \\ c_x \leq j_x < c_x + 2^{ch} \end{array} \Big\rbrace \times \lbrace c_\theta \rbrace \Bigg) ,\tag{11} \overline{W}_c = \overline{\overline{W}} \cap \overline{W}\tag{12} 叶节点具有高度$c_h=0$，并且对应于可行解$W\ni\xi_c=\xi_0 +（rc_x，rc_y，\xi_\theta c_\theta）$。 在我们的算法3的公式中，包含所有可行解的根节点没有明确地出现并且分支到一组初始节点$C_0$，在固定高度$h_0$覆盖搜索窗口 \overline{W}_{0,x} = \lbrace -w_x + 2^{h_o}:j_x \in \Bbb Z, 0 \leq 2^{h_o} \leq 2w_x \rbrace, \\ \overline{W}_{0,x} = \lbrace -w_x + 2^{h_o}:j_x \in \Bbb Z, 0 \leq 2^{h_o} \leq 2w_x \rbrace, \\ \overline{W}_{0,x} = \lbrace -w_x + 2^{h_o}:j_x \in \Bbb Z, 0 \leq 2^{h_o} \leq 2w_x \rbrace, \\ C_0 = \overline{W}_{0,x} \times \overline{W}_{0,y} \times \overline{W}_{0,\theta} \times \{h_0\}. \tag{13}At a given node c with $c_h &gt; 1$, we branch into up to four children of height $c_h − 1$在$c_h&gt;1$的给定节点c，我们分支最多四个子高度$c_h − 1$ C_c = ((\{c_x,c_x + 2^{c_h-1}\} \times {c_y, c_y + 2^{c_h-1} \times c_\theta}) \cap \overline{W}) \times \{c_h-1\}\tag{14}3) 计算上界：分支和边界方法的剩余部分是计算内部节点上限的有效方式，包括计算工作量和边界质量。我们用 score(c) = \sum_{k=1}^{K}\underset{j\in \overline{\overline{W_c}}}{max}M{nearest}(T\xi_jh_k) \\ \geq\sum_{k=1}^{K}\underset{j\in \overline{W_c}}{max}M_{nearest}(T\xi_{j}h_{k})\\ \underset{j\in \overline{W_c}}{max}\sum_{k=1}^{K}maxM_{nearest}(T\xi_{j}h_{k})\tag{15}为了能够有效地计算最大值，我们使用预先计算的网格$M_{precomp}^{ch}$。每个可能的高度$c_h$预先计算一个网格允许我们用扫描点数的effor linear计算得分。请注意，为了能够执行此操作，我们还计算了超过$\overline{\overline{W_c}}$的最大值，该值可能大于我们搜索空间边界附近的$\overline{W_c}$。 score(c) = \sum_{k=1}^{K}M_{precomp}^{ch}(T\xi_{c}h_{k})\tag{16} M_{precomp}^{ch}(x,y) = \underset {\begin{matrix} x^, \in [x,x+r(2^h-1)] \\ y^, \in [y,y+r(2^h-1)] \end{matrix}} {max} M_{nearest}(x^, , y^,) \tag{17}与叶节点一样使用$\xi_c$。请注意，Mhprecomp与$M_{nearest}$具有相同的像素结构，但在每个像素中存储从那里开始的$2^h\times 2^h$像素值的最大值。图3给出了这种预先计算的网格的一个例子。 为了使构建预先计算的网格的计算工作量保持在较低水平，我们要等到概率网格不再接收更新。然后我们计算一组预先计算的网格，并开始匹配它。 对于每个预先计算的网格，我们计算从每个像素开始的$2^h$像素宽行的最大值。使用该中间结果，然后构造下一个预先计算的网格。 如果按照添加顺序删除值，则可以按摊销$O（1）$保持更改值集合的最大值。连续最大值保存在一个双端队列中，可以递归地定义为包含当前在集合中的所有值的最大值，然后是在第一次出现最大值之后所有值的连续最大值列表。对于空的值集合，此列表为空。使用此方法，可以在$O（n）$中计算预先计算的网格，其中n是每个预先计算的网格中的像素数。 计算上限的另一种方法是计算较低分辨率的概率网格，连续减半分辨率，见[1]。由于我们的方法的额外内存消耗是可接受的，我们更喜欢使用较低分辨率的概率网格，这导致比（15）更差的界限，从而对性能产生负面影响。 参考[1] E. Olson，M3RSM：多对多分辨率Scan match，载于IEEE国际机器人与自动化会议论文集（ICRA），2015年6月。 [2] K. Konolige，G。Grisetti，R。Kummerle，W。Burgard，B。Limketkai，¨和R. Vincent，`稀疏位姿调整2D绘图`，在IROS，台湾台北，2010年10月10日。 [3] F. Lu和E. Milios，用于环境绘图的全局一致范围扫描对准，自主机器人，第一卷。 4，不。 4，pp.333- 349,1997。 [4]F.Mart’ın，R。Triebel，L。Moreno和R. Siegwart，两种不同的三维构图工具：基于DE的Scan match和基于特征的环路检测，Robotica，vol。 32，不。 01，pp.19-41,2014。 [5] S. Kohlbrecher，J。Meyer，O。von Stryk和U. Klingauf，具有完整3D运动估计的灵活且可扩展的SLAM系统，Proc。 IEEE国际安全，安全和救援机器人研讨会（SSRR）。 IEEE，2011年11月。 [6] M. Himstedt，J。Frost，S。Hellbach，H.-J。 Bohme和E. Maehle，使用几何地标关系的2D LIDAR扫描中的大规模地点识别，智能机器人和系统（IROS 2014），2014年IEEE / RSJ国际会议。 IEEE，2014，pp.5030-5035。 [7] K. Granstrom，T。B.Sch¨on，J.I。Nieto和F. T. Ramos，学习close闭合范围数据循环，国际机器人研究杂志，第一卷。 30，不。 14，pp.1728-1754,2011。 [8] G. Grisetti，C。Stachniss和W. Burgard，通过自适应提议和选择性重采样改进基于网格的SLAM与Rao-Blackwellized粒子滤波器，机器人与自动化，2005年.ICRA 2005. 2005年会议记录IEEE国际会议。 IEEE，2005，pp.2432-2437。 [9] G. D. Tipaldi，M。Braun和K. O. Arras，FLIRT：2D范围数据的兴趣区域，应用于机器人导航，在实验机器人中。 Springer，2014年，第695-710页。]]></content>
      <categories>
        <category>slam技术</category>
      </categories>
      <tags>
        <tag>cartographer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Algorithms-notes]]></title>
    <url>%2Falgorithms-notes%2F</url>
    <content type="text"><![CDATA[Algorithms-notes Algorithms-notesAlgorithms-notes]]></content>
      <categories>
        <category>算法相关</category>
      </categories>
      <tags>
        <tag>algo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[静脉曲张的原理和治疗方法]]></title>
    <url>%2Fhealth-VaricoseVeins%2F</url>
    <content type="text"><![CDATA[概述静脉曲张形成的主要原因是由于先天性血管壁膜比较薄弱或长时间维持相同姿势很少改变，血液蓄积下肢，在日积月累的情况下破坏静脉瓣膜而产生静脉压过高，使血管突出皮肤表面的症状。 改善方法物理治疗: 弹力袜1.1 弹力袜促进血液回流: 为什么有用?: 弹力袜在腿上的压力不一样，利用这种压力梯度可以促进血液回流。 注意： 但不是所有的人都适合穿弹力袜，静脉曲张较严重的患者穿弹力袜之前最好咨询医生。 1.2 按摩加速血液循环:在腿部感到疲劳时，或者平时方便的时候对腿部进行简单的揉捏，加速血液循环。 注意：坚持下来，静脉曲张就可以得到有效的改善.至于按摩可以改善血液循环的原理其实并不是很有科学依据，知乎上还是能找到一些,但是找不到靠谱的解释，本人实践过，确实是没有什么改善,不过也有可能是按摩手法的不对。网上找了能够促进血液循环的按摩方法.静脉曲张按摩手法 运动加强静脉管壁从血液动力学的角度进行观察，健康的人在运动时，由于瓣膜的功能正常，肌肉的规律性收缩使得深部静脉血液回流加速，皮下静脉的压力甚至可能比静止时还低。所以进行适当的跑步锻炼，不但不会引起下肢静脉曲张，恰恰相反，跑步可以使腿部肌肉活动增强，挤压静脉内的血液，使其流动更加顺畅，还有助于预防和改善下肢静脉曲张。对于静脉曲张的患者来说，当然也可以进行如慢跑、游泳、单车、跳绳等运动。但是因为静脉瓣膜功能受损，应当避免像举重、快速冲刺短跑、跳远、投掷等引起腹压增高的活动。 注意:但是严重的静脉曲张患者，不要一下子运动过量，否则容易对心血管造成伤害。 食疗 多食用蔬菜、水果、豆类等纤维素含量较高的食物，适量食用瘦牛肉、鸡肉等，多吃含维E的食物，如洋白菜、菠菜、橙子等可以疏通经络，改善血液循环，减轻腿部的沉重感。 1、在静脉曲张的饮食中新鲜蔬菜和水果不能少：新鲜蔬菜和水果含有大量的维生素及矿物质，可以改善组织的氧化作用，增加血液循环，提高机体免疫力。如新鲜水果中含有大量维生素 C ，可以通过降低血凝倾向，改善血液循环，促进康复，预防淤伤。新鲜蔬菜含有丰富纤维素，能避免便秘，保持肠道清洁，改善肛周围的血液循环，预防末梢静脉曲张和痔疮的形成。 2、要有足够的蛋白质：静脉曲张的饮食中要多含蛋白质丰富的食物，如鱼、牛、羊肉等，大豆以及豆制品也含有丰富的植物蛋白，也应多吃。充足的蛋白质可以维持体内所有营养物质的平衡，增强免疫力，保护细胞，还可以乳化脂肪，促进血液循环。 3、含维生素 E 丰富的食物：静脉曲张的饮食要多含维生素E的食物，可以改善血液循环，减轻腿部的沉重感。含维生素 E 丰富的食物有：洋白菜、菠菜、甘蓝、麦芽、坚果类、大豆、全麦、粗粮、蛋等都是静脉曲张的饮食注意事项。 如何预防预防的扎6招防小腿静脉曲张 睡前抬腿久站抬脚尖 1. 睡前抬腿 2. 久站抬脚尖静脉曲张的成因是静脉瓣膜功能不良，静脉血液向下逆流而形成静脉曲张。因此，站立时，要每隔一段时间就抬脚尖，让肌肉收缩，给静脉血液加压，让血液往心脏方向流动，致使静脉瓣膜打开维持正常功能。一般来说，小腿感到酸麻时，就是在提醒你要抬脚尖了。 3. 穿平跟鞋平跟鞋有助于预防静脉曲张，在体育锻炼时一定要穿有海绵垫的运动鞋或旅游鞋，对缓解腿部压力，预防静脉曲张很有帮助。 4. 赤足在条件允许的情况下，下班回家后，将鞋脱掉，赤足或穿拖鞋行走，可以改善足部血液循环，并使足部肌肉得到锻炼。 5. 抬高下肢站立工作者在工间休息时，宜将鞋脱掉，双脚抬高，足部要高于心脏30厘米以上，下班回到家中后也应将双脚抬高15分钟，缓解血液对下肢的压力。 6. 改掉不良如厕习惯在上厕所时看书报，这是很不好的生活习惯。上厕所时看书报，蹲踞时间长会给下肢静脉增加过多的负担，造成血管内滞血，因此这种习惯一定要改掉。 装备:1. 弹力袜子使用 起床穿。 睡觉不穿。 半年换。最好三个月，看物料和生活习惯。因为弹性会不断下降，没弹性等于没压力，所以穿鬆了就要换。 手洗＋不晒太阳＋摊乾＋不用化学清洗剂(柔顺／漂白)可以让弹性保持久一点，这个就看自己勤不勤快了。 最重要的一点，运动。简单说就是让下肢肌肉更好的泵血，更好的把血从下肢输送回心脏，另外也可以避免和减少长期穿压力袜后依赖和股肉无力的情况。 选择型号 根据穿者的腿部症状选择合适的静脉曲张袜压力。静脉曲张袜分为以下几级压力：一级低压预防保健型(15-25mmHg)：适用于静脉曲张、血栓高发人群的保健预防;一级中压初期治疗型(25-30mmHg)：适用于静脉曲张初期患者;二级高压中度治疗型(30-40mmHg)：适用于下肢已经有明显的静脉曲张(站立时静脉血管凸出皮肤表面)，并伴有腿部不适感的患者(如下肢酸乏肿胀、湿疹瘙痒、抽筋发麻、色素沉着等)、静脉炎、怀孕期间严重静脉曲张、静脉曲张手术后(大小隐静脉剥脱术)患者、深静脉血栓形成后综合症患者;三级高压重度治疗型(40-50mmHg)：适用于下肢高度肿胀、溃疡、皮肤变黑变硬、高度淋巴水肿、整形抽脂术后恢复期等患者。 根据病变部位选择静脉曲张袜的长度。中统袜(膝下)、长统袜(及大腿)、连裤袜(及腰部)。如果穿者只是膝盖以下的部位患有静脉曲张，穿中统静脉曲张袜即可;如果穿者膝盖以上的部位也有症状、需要穿长统的或者连裤型静脉曲张袜。 确定合适的号型(静脉曲张袜分为小号S、中号M、大号L、加大号XL)。量出穿者腿部的三个主要尺寸(厘米)：脚踝(脚脖子最细处)周长、小腿肚最大周长及大腿最大周长，以确定合适的号码，购买连裤袜要根据穿者的身高体重选择号码。 注意: 如何判断自己的静脉曲张严重程度国际上，静脉曲张按照程度不同共分为0-6期： c1: 表层血管像蚯蚓一样曲张，明显凸出皮肤，曲张呈团状或结节状，有毛细血管扩张、网状静脉、踝部潮红。c2: 在站立时腿部可见弯曲增粗的表浅静脉血管，高出皮肤，在腿部抬高或平卧后可消失，常有小腿酸胀、易疲劳等不适感觉，此期是治疗的较好时期。c3: 曲张血管增多，小腿开始出现水肿，以站立过久或劳累后较明显，晨起时水肿可消退。患肢常比对侧腿增粗，有些人还出现皮肤瘙痒，严重者呈现湿疹、瘀积性皮炎等皮肤病变。c4: 血管内血液瘀积过多，静脉压力明显增高，使一部分血液成分渗透至血管外的皮肤及皮下组织，造成局部皮肤发红，变紫，直至发黑(血中铁元素沉积)，并且失去弹性而变硬。c5: 已发展为急性溃疡期，发黑变硬的皮肤在外力作用下发生破溃，采用普通方法已很难康复，严重影响工作与生活。c6: 静脉曲张晚期，或未经正确治疗的静脉性溃疡反复发作，形成臁疮腿，常见于踝关节附近及小腿下段，俗称“老烂腿”。 一级压力裤: c1 二级压力裤: c2-c4 三级压力裤: c4*c6 去哪里买 国内压力袜是属于医疗器械，不是哪都可以卖的，如果不是正规的地方卖的，大概率不是真的 上外国网站自己买，因为国内压力袜是属于医疗器械，如果有代购或是什麽海淘，如果不是正规的医疗器械卖家，性质像偷卖外国药一样。 排行版]]></content>
      <categories>
        <category>运动康复</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[封闭阳台]]></title>
    <url>%2Fhomework-Closed-balcony%2F</url>
    <content type="text"><![CDATA[概述一般封闭阳台由三部分构成 框窗:建议安装有框 气密窗，最好是经过抗压性、气密性（刮风的时候不会有灰尘钻进来）和水密性（下雨的时候不会有水流到室内）检验的。 注意： 气密性能: 120等级、30等级、8等级、2等级影响因素: 窗户框扇的搭接处、气密防水胶条和毛刷条长度、内扇窗的气密橡胶条与内扇下支长度，毛刷条的完整性，玻璃压条与玻璃长度 玻璃 钢化玻璃隔音保温表现更好的双层中空玻璃 防护栏 框窗 框窗类型有很多，铝合金门窗、实木窗、铝木复合窗、玻璃钢门窗、不锈钢门窗、无框窗 塑钢门窗优点是隔音、隔热防火保温，气密性、水密、防腐都不错，而且价格便宜。缺点是它的断面较大，比起铝合金窗来说采光性略差。 铝合金门窗优点: 硬度高，不易刮伤，耐磨耐候，表面光滑，耐污性佳便于清洁。而且价格便宜。缺点: 是导热性强，保温性差。 断桥铝合金优点: 结合上面两种缺点: 最贵 -玻璃门窗（也叫无框窗）优点:采光性良好、空气流通好、美观易折叠等。缺点:保温性差，密封性差，隔音一般。 价格塑钢窗的价格塑钢窗主材价格:每种品牌的塑钢窗主材价格不同,如海螺型材现在的价格是10500元/吨,每吨的出窗率要看窗的型号,88推拉窗估计能出95-100平米,80的推拉窗能出100-105平米,60平开窗能出70-75平米左右,按面积计算,也就是88的型材成本价格为110-105元,80的型材成本价格为105-100元,60的型材成本合到150-140元。 塑钢窗五金配件价格:推拉窗要用到的滑轮和月牙锁,这两个加起来的价格为8元/平米,还有就是密封毛条和减震胶条,加起来价格为10元/平米,再就是制作和安装要30元/平米,另外运输要4元/平米。 塑钢窗加强钢价格:主材里要有加强钢,市场价格是4000左右/吨,如果用的是1.2的话要成本20元左右,低于这个标准的1.0以下的可能有12元左右就可以了。 塑钢窗玻璃价格:市场上的玻璃有浮法、格法、平板等几种,浮法的5毫米的玻璃价格30元,格法的24元,平板的19元。如果用中空玻璃的话,除了加一层玻璃的钱还要用到铝合金的框架和干燥外围的中空胶,这些的成本价格是10-15元。 塑钢窗密封处理价格:主要是打泡沫胶和密封胶,价格要看窗台的平整情况,好的窗台有5元/米就可以,旧的窗台由于拆旧窗的破坏会用到12元/米左右。 88推拉窗 110 型材+五金8+配件10+制作安装30+20加强钢+玻璃30+运输4=212元/平米。 80推拉窗 105型材+五金8+配件10+制作安装30+20加强钢+玻璃30+运输4=207元/平米。 60平开窗 150型材+五38+配件10+制作安装30+20加强钢+玻璃30+运输4=284元/平米。 铝合金窗的价格铝合金普通推拉窗的价格在250元/平方米左右,采用1.2mm厚标准铝型材,单片5mm玻璃;铝合金隔音隔热窗750元/平方米左右,采用1.4厚铝型材,中空玻璃。 铝合金窗主材价格差别很大,铝材的价格主要差别在铝材的质量上,有厚薄优劣之分,一般氧化铝材160元/平米,电泳铝材200元/平方左右,彩色铝材260元/平米以上。铝型材质有50系列、55系列、60系列、70系列等,其中50系列的铝材价格在400元/平米左右,而70系列铝材价格可达到700元/平米,不同系列的铝材质厚度不一样,铝材越厚的窗户价格越高。 以上是塑钢窗和铝合金窗的价格介绍,塑钢窗因为用得比较多,大家对它的价格很熟悉。铝合金窗低档的没人愿意用,宁可用塑钢窗代替,高档铝合金窗价格又很高,常用于施工要求较高的建筑或高档建筑。]]></content>
      <categories>
        <category>家居收纳</category>
      </categories>
      <tags>
        <tag>阳台</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python笔记]]></title>
    <url>%2Flanguage-python-notes%2F</url>
    <content type="text"><![CDATA[python笔记python笔记python笔记python笔记]]></content>
      <categories>
        <category>语言相关</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在vscode jupyter模式下工作]]></title>
    <url>%2Ftools-work-in-vscode-with-jupyter%2F</url>
    <content type="text"><![CDATA[在vscode jupyter模式下工作 概述使用jupyter notebook工作时候不习惯，自己还是喜欢在vscode纯vim的工作模式。于是下载了vscode jupyter的插件，但是这是来写pyd代码的。我的目的最终是生成md文档，记录我学习的过程。于是我下载了一个py2md.py的工具。做了些修改，用于把py生成md文件。 1234567891011#! /usr/bin/env pythonimport sysimport itertoolsfor markdown, lines in itertools.groupby(open(sys.argv[1]).readlines(), key=lambda line: line.startswith('# ')): if markdown: print(''.join(line[2:] for line in lines)) else: print('\n```python') print(''.join(lines).strip()) print('```\n') 写的过程中需要注意的几点: 文档直接用＃ 隔开，并且不要留有空格# # 文档直接用＃ 隔开，并且不要留有空格 标题上下用# ， 看起来更清晰## ####我是标题# python文档的代码用＃％％是表示执行cell的#%%python文档的代码用＃％％是表示执行cell的 输出结果用不带空格的#表示#输出 使用vscode 的tasks可以快速的执行python命令添加任务的做法可见vscode 文档 更新vscode 下安装的插件 github]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>jupyter</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[notes-python]]></title>
    <url>%2Flanguage-notes-python%2F</url>
    <content type="text"><![CDATA[概述中文 Python 笔记这是个学习python的好资料,用神器jupyter写的。而我的目的是jupyter来阅读不如用docsify阅读来的方便， 幸运的是作者已经写了个脚本，用这个脚本可以快速的转换,所以我做了写修改，直接生成md文件。 下载 1git clone https://github.com/lijin-THU/notes-python.git 生成md文件 1python generate_static_files.py 提交到note-python的docs的docs文件,并设为个人博客的子目录 个人博客创建 notes-python文档 ab abc 你好吗这是一个我很好 概述 你好吗 这是一个 我很好]]></content>
      <categories>
        <category>语言相关</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[youtube-dl pri]]></title>
    <url>%2Ftools-youtube-dl%2F</url>
    <content type="text"><![CDATA[概述这是一个可以下载youtube视频和字幕的神奇工具，我主要用于下载youtube视频和字幕.使用这个的前提是你得翻墙。aria2c可以使youtube-dl多线程下载，但是不支持socks5,所以终端使用privoxy代理socker systemctl start privoxy.service 1youtube-dl --proxy https://127.0.0.1:8118 --playlist-start 285 -o "%(playlist_index)s-%(title)s.%(ext)s" "https://www.youtube.com/watch?v=G7qwhdnE7RA&amp;index=2&amp;list=PLAwxTw4SYaPlqMkzr4xyuD6cXTIgPuzgn&amp;t=0s" --external-downloader aria2c --external-downloader-args "--https-proxy='https://127.0.0.1:8118' -x 16 -k 1M" 命令解析:youtube:—proxy https://127.0.0.1:8118j8118是privoxy代理socks5协议的https端口. 同理，aria2c也需要配置代理 —https-proxy=’https://127.0.0.1:8118 -x 16 -k 1M -x 是最大线程数，1M每个线程最大下载速度 常用命令youtube-dl有很多参数，我就不一一介绍。运行youtube -h可以查看所有命令,这里列出我用到的一些命令: 安装proxychains,需要修改/etc/proxychains配置最后一行12# socks4 127.0.0.1 9050socks5 127.0.0.1 1080 1080是你翻墙的端口 1proxychains youtube-dl --write-sub --sub-lang en --skip-download -o "%(playlist_index)s-%(title)s.%(ext)s" "https://www.youtube.com/playlist?list=PLAwxTw4SYaPkCSYXw6-a_aAoXVKLDwnHK" youtube-dl —list-subs —no-playlist “https://youtu.be/nLEbJZFm5-E?list=PLAwxTw4SYaPkCSYXw6-a_aAoXVKLDwnHK “选项的解释 —write-sub: 写到字幕文件 —sub-lang: 下载语言 —skip-download: 不下载视频 -o “%(playlist_index)s-%(title)s.%(ext)s” : 使用编号加标题]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>youtube-dl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机视觉入门]]></title>
    <url>%2Fcomputer-vision-Introduction%2F</url>
    <content type="text"><![CDATA[计算机视觉入门]]></content>
      <categories>
        <category>机器视觉</category>
      </categories>
      <tags>
        <tag>udacity</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubuntu环境搭建脚本]]></title>
    <url>%2Ftools-linux-config%2F</url>
    <content type="text"><![CDATA[ubuntu环境搭建脚本 使用阿里云存储软件和私有代码阿里云code code.aliyun.com概述 单个project的存储上限是1G 每个帐号创建的仓库数不能超过50个。 安装 chrome123wget https://code.aliyun.com/lsy5631932/software/blob/6ac1f060ddca3ee5a099686d994664c64a309c36/google-chrome-stable_current_amd64.debsudo dpkg -i ./google-chrome-stable_current_amd64.debrm google-chrome-stable_current_amd64.deb switchomiga安装ssl安装 git123sudo apt-get install gitgit config --global user.email &quot;you@example.com&quot;git config --global user.name &quot;Your Name&quot; 安装 Node.js12345wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | shecho &quot;export NVM_DIR=&quot;$HOME/.nvm&quot;&quot; &gt;&gt; ~/.zshrcsource ~/.zshrc[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot;nvm install stable 安装 Hexo12npm install -g hexo-clinpm install hexo --save 安装 docsify1npm i docsify-cli -g tmux1sudo apt-get install tmux -y 设置shell为zshrc12sudo apt-get install zsh -ychsh -s /bin/zsh 安装oh my zsh1wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh 切换caps to ctrl12echo &quot;setxkbmap -layout us -option ctrl:nocaps&quot; &gt;&gt; ~/.zshrcsource ~/.zshrc 模糊搜索神器fzf123git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf~/.fzf/installsource ~/.zshrc autojump12345git clone git://github.com/joelthelion/autojump.git ~/.autojump~cd ~/.autojump~./install.py[[ -s /home/syue/.autojump/etc/profile.d/autojump.sh ]] &amp;&amp; source /home/syue/.autojump/etc/profile.d/autojump.shautoload -U compinit &amp;&amp; compinit -u install ros12345678910sudo sh -c &apos;echo &quot;deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&apos;sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116sudo apt-get updatesudo apt-get install ros-kinetic-desktop-fullapt-cache search ros-kineticsudo rosdep initrosdep updateecho &quot;source /opt/ros/kinetic/setup.zsh&quot; &gt;&gt; ~/.zshrcsource ~/.zshrcsource /opt/ros/kinetic/setup.zsh install clioninstall docker1234curl -fsSL get.docker.com -o get-docker.shsudo sh get-docker.sh --mirror Aliyunsudo groupadd dockersudo usermod -aG docker $USER 用这个漂亮的工具将方程式截图迅速转换为 LaTeXsudo snap install mathpix-snipping-tool youtube-dl aria2cpip install —upgrade youtube-dlsudo apt-get install aria2 privoxy echo “forward-socks5 / localhost:8118 .” &gt;&gt; /etc/privoxy/config]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[打造Hexo个人博客]]></title>
    <url>%2Ftools-hexo-note%2F</url>
    <content type="text"><![CDATA[打造Hexo个人博客配置Hexo渲染MathJax数学公式，推荐文章：https://www.jianshu.com/p/7ab21c7f0674 经历了几天的努力，终于解决了几个重大问题，打造出自己理想的博客个人网站。主要是参照大黄菌的个人博客,但是她没有公布使用如何使用hexo跳转到docsify的步骤。现在把我这几天填过的坑记下来。 首先说下我的需求: hexo作博客,next作主题. 可以自动跳转到docsify文档的界面. 使用个人域名 支持mathjax hexo作博客,next作主题hexo作博客使用hexo构建博客主要是参照hexo的官方文档.以下是构建的步骤: 开始使用 概述: 安装: post_asset_folder: true 注意: npm 必须使用sudo 建站: npm install这条指令有什么用 package.json 的文档内容现在有不明白有什么用 scaffolds: 默认post,draft是草稿模板，page是页面模板，当你使用tag,category的时候用到，后面会讲到 source: _文件隐藏，Markdown,html解析，其他拷贝过去。如拷贝CNAME themes:主题，next就是拷贝到这里的 配置: 网站: title ,就是浏览器标签栏的名字，subtitle 网页显示的Hexo首页的地方. 注意：必须hexo serve重启才能生效 网址: 网站存放在子目录,目前不用 目录: 目前不用 文章: titlecase指的是将每个单词首字母转换成大写,post_asset_folder: true 分类 &amp; 标签: 不用到 日期 / 时间格式: 不用到 分页 不用到: 扩展: theme: ,现在不用，但是后面改为next要回来改 deploy 最好现在就布置，自动发布到github,之前没有看到这个选项，手动发布. 注意: 这是我的设置type: gitrepo: git@github.com:lsy563193/lsy563193.github.io.gitbranch: master 指令: init, new, generate, deploy, publish ,server 注意:hexo g -d, hexo d -g 通常用,一样的hexo serve 也是可以简写为hexo s的，不用加路径，常用 迁移 基本操作 写作 Front-matter开启了 comments 评论功能 预先定义的参数 分类和标签 注意:categories: Diary Life会使分类Life成为Diary的子分类 标签插件在markdown 中添加太多的hexo 标签，其实会在以后用其他编辑器预览，查看，迁移时留下诸多不变，毕竟，私有的语法意味着不兼容 资源文件夹资源（Asset）代表 source 文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件等。 数据文件 服务器 生成器 部署自定义 永久链接 可以自动跳转到docsify文档的界面实现的方式是使用域名覆盖。以链接到吴恩达《深度学习》系列课程笔记,为例,网址为http://lsy563193/github.io/Andrew-Ng-Deep-Learning-notes/ ,我们只要让page的网址也为这个，这样在点击的时候就自动替换为 Andrew-Ng-Deep-Learning-notes的内容实现的步骤如下: 克隆:克隆Andrew-Ng-Deep-Learning-notes到你的github目录， 设置为github.io的doc目录: 把这个项目设置为你博客下的目录 把hexo生成的地址也设置为这个: 首先创建Andrew-Ng-Deep-Learning-notes的博文 1hexo new Andrew-Ng-Deep-Learning-notes 设置category,比如为深度学习笔记,效果如下 设置_config.yml的permalink: :title/: 这样两者的地址就一样的 Hexo-Next-主题优化参考 浏览页面的时候显示当前浏览进度_config.yml scrollpercent 开启版权声明主题配置文件下,搜索关键字post_copyright,enable改为true 主题]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
